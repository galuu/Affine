(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     60778,       1708]
NotebookOptionsPosition[     48747,       1281]
NotebookOutlinePosition[     55241,       1507]
CellTagsIndexPosition[     55149,       1501]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["Demonstration of ", "Title"],
 StyleBox["Affine.m", "Title",
  FontSlant->"Italic"],
 StyleBox[" usage", "Title"],
 "\n",
 StyleBox["First we need to setup path and load the package", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873247139276*^9, 3.521873270215405*^9}, {
   3.521873317159025*^9, 3.5218733183659353`*^9}, {3.521873874978292*^9, 
   3.52187402707727*^9}, {3.52187416321414*^9, 3.52187416458253*^9}, {
   3.522904276810939*^9, 3.5229042790499067`*^9}, 3.522984643613719*^9, {
   3.523011262343731*^9, 3.5230113095029182`*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"$Path", ",", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
     "\"\<../src/\>\""}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", "affine.m"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511850132957571*^9, 3.51185016527726*^9}, {
   3.514881427513479*^9, 3.514881432925623*^9}, {3.521873174179186*^9, 
   3.521873192522464*^9}, 3.521873393683514*^9, {3.521873520093526*^9, 
   3.5218735398350573`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["Or we can run unit tests to see that package works \
correctly:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873326641025*^9, 3.521873371817109*^9}, {
  3.522143576451425*^9, 3.522143591079445*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"$Path", ",", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
     "\"\<../tests/\>\""}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", "tests.m"}], ";"}]}], "Input",
 CellChangeTimes->{{3.52214360552756*^9, 3.522143612433168*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Weights", "Subtitle"],
 "\n",
 StyleBox["We review basic datastructures. \n", "Text"],
 StyleBox["finiteWeight",
  FontVariations->{"Underline"->True}],
 StyleBox[" and ", "Text"],
 StyleBox["affineWeight", "Program",
  FontVariations->{"Underline"->True}],
 StyleBox[" are used to represent weights of finite-dimensional and \naffine \
Lie algebra weights correspondingly.  We have following generic \
constructors:", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952431431405*^9, 3.5219524368895597`*^9}, 3.522985032888318*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"makeFiniteWeight", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Text",
 Evaluatable->True,
 CellChangeTimes->{{3.521874237838254*^9, 3.521874291603204*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 "Here the argument of constructor is the list of coordinates in orthogonal \
basis",
 StyleBox[".\nConstructor for affine LIe algebra weights is similar but it \
also needs level and grade of weight.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521874503291995*^9, 3.5218745078972883`*^9}, {3.5218746640868883`*^9, 
  3.521874696022236*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"aw", "=", 
  RowBox[{"makeAffineWeight", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2"}], "}"}], ",", " ", "2", ",", " ", "3"}], 
   "]"}]}]], "Text",
 Evaluatable->True,
 CellChangeTimes->{{3.521874321661553*^9, 3.521874335492091*^9}, {
  3.521874533674336*^9, 3.521874585669978*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
We can get level and grade of affine weight with the functions:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"level", "[", "aw", "]"}]], "Input",
 CellChangeTimes->{{3.5218745879141293`*^9, 3.521874590284514*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"grade", "[", "aw", "]"}]], "Input",
 CellChangeTimes->{{3.5218745926516333`*^9, 3.5218745955480757`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["We can add and multiply weights by numbers. ", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.5218776827531633`*^9, 3.5218776976502533`*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeFiniteWeight", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}], "+", 
  RowBox[{"2", "*", 
   RowBox[{"makeFiniteWeight", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.5218777030156403`*^9, 3.521877721067938*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Root systems", "Subtitle"],
 "\n",
 "Now we can introduce root systems. We can specify root system by hand by \
listing the set of simple roots. For example to specify the root system of \
algebra ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["B", "2"], TraditionalForm]]],
 " (so(5)) we can use this code:"
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952463187976*^9, 3.5219524670070477`*^9}, 3.52298514509665*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"makeFiniteRootSystem", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"makeFiniteWeight", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], "]"}], ",", 
    RowBox[{"makeFiniteWeight", "[", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.52187485537164*^9, 3.521874905075886*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["Or in more concise form:", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.5218749128347273`*^9, 3.521874931166287*^9}, 
   3.5218750081183243`*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"rs", "=", 
  RowBox[{"makeFiniteRootSystem", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521874936696598*^9, 3.521874951770589*^9}, {
  3.521875011227066*^9, 3.521875011925099*^9}, {3.521875077254133*^9, 
  3.521875078703928*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
Root systems of (non-twisted) affine Lie algebras are constructed as 
affine extensions of finite-dimensional ones:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521875045646961*^9, 3.521875091176461*^9}, 
   3.521952970570891*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"makeAffineExtension", "[", "rs", "]"}]], "Input",
 CellChangeTimes->{{3.521875094316946*^9, 3.521875100293325*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
We have special constructors for root systems of simple Lie algebras. Long \
form is\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.5218752754950743`*^9, 3.52187532124365*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"makeSimpleRootSystem", "[", 
  RowBox[{"C", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.5218753229238987`*^9, 3.521875329653369*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["Concise form is just", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521875337444303*^9, 3.521875342403859*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 SubscriptBox["C", "3"]], "Input",
 CellChangeTimes->{{3.521875345351853*^9, 3.521875348928938*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
Now we can get some properties of root system and algebra. For example\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.5218753813096247`*^9, 3.521875412253256*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"rank", "[", 
  SubscriptBox["C", "3"], "]"}]], "Input",
 CellChangeTimes->{{3.5218754164155607`*^9, 3.521875420485729*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"roots", "[", 
  SubscriptBox["C", "3"], "]"}]], "Input",
 CellChangeTimes->{{3.52187542783949*^9, 3.521875432307357*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
To specify root system of semisimple Lie algebra we can use following natural \
notation\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.5218777592829733`*^9, 3.521877781823497*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["C", "3"], "\[CirclePlus]", 
  SubscriptBox["B", "2"]}]], "Input",
 CellChangeTimes->{{3.52187778601694*^9, 3.521877815911873*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"positiveRoots", "[", 
  RowBox[{
   SubscriptBox["A", "1"], "\[CirclePlus]", 
   SubscriptBox["B", "2"]}], "]"}]], "Input",
 CellChangeTimes->{{3.521952546497574*^9, 3.5219525700953627`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 "We can use hat to specify (non-twisted) affine extension of \
finite-dimensional root system. \nFunction ",
 StyleBox["cartanMatrix", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" calculate Cartan matrix corresponding to root system.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.5218777592829733`*^9, 3.521877781823497*^9}, {3.522205153589662*^9, 
  3.522205215611411*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cartanMatrix", "[", 
   OverscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["A", "3"], "\[CirclePlus]", 
      SubscriptBox["B", "2"]}], ")"}], "^"], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.5222050617596416`*^9, 3.522205062748065*^9}, {
  3.52220509348536*^9, 3.5222051242250757`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cartanMatrix", "[", 
   SubscriptBox["A", "2"], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.522205083738069*^9, 3.52220508970418*^9}, {
  3.522205131070181*^9, 3.5222051362877293`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
If we specify root system we can use Dynkin labels to construct weight:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878076807229*^9, 3.521878097048913*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"weight", "[", 
   SubscriptBox["B", "2"], "]"}], "[", 
  RowBox[{"1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5218780991276693`*^9, 3.521878104134664*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Weyl group", "Subtitle"],
 "\n",
 "Weyl group is generated by reflections corresponding to simple roots. So we \
can specify Weyl group element\nby the sequence of simple reflection."
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952489218959*^9, 3.521952492891446*^9}, 3.52298544353277*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"weylGroupElement", "[", 
     SubscriptBox["B", "2"], "]"}], "[", 
    RowBox[{"1", ",", "2", ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5218779645228243`*^9, 3.521878001554697*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["Then we can act by Weyl group element on some weight", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878012949891*^9, 3.521878033498893*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"s", "@", 
  RowBox[{
   RowBox[{"weight", "[", 
    SubscriptBox["B", "2"], "]"}], "[", 
   RowBox[{"1", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521878042025902*^9, 3.521878054735639*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
It is possible to calculate Weyl group orbit of some weight. This and related \
functions which calculate orbits 
with the parity of Weyl group elements are of crucial importance in our \
approach to calculation of weight 
multiplicities in Lie algebra modules and branching coefficients.\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878012949891*^9, 3.521878033498893*^9}, {3.5218910732264357`*^9, 
  3.521891209294622*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"orbit", "[", 
   SubscriptBox["B", "2"], "]"}], "[", 
  RowBox[{
   RowBox[{"weight", "[", 
    SubscriptBox["B", "2"], "]"}], "[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5218912114774427`*^9, 3.521891233007352*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["\<\
Some times it is more convenient to look not at the coordinates in orthogonal \
basis, 
but at Dynkin labels of weights. So we can present previous result this way:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878012949891*^9, 3.521878033498893*^9}, {3.521891251722952*^9, 
  3.521891328344763*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dynkinLabels", "[", 
   SubscriptBox["B", "2"], "]"}], "/@", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"orbit", "[", 
     SubscriptBox["B", "2"], "]"}], "[", 
    RowBox[{
     RowBox[{"weight", "[", 
      SubscriptBox["B", "2"], "]"}], "[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5218913376051207`*^9, 3.521891348519423*^9}, {
  3.521891596885304*^9, 3.5218916047996492`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Auxiliary datastructures  \n", "Subtitle"],
 StyleBox["Two auxiliary datastructures are important for what follows. First \
one is ", "Text"],
 StyleBox["hashtable", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" which is implemented \nwith ", "Text"],
 StyleBox["DownValues", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and have functions ", "Text"],
 StyleBox["keys", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and ", "Text"],
 StyleBox["values", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[":", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.5219525209445267`*^9, 3.5219525250626173`*^9}, {3.521953202921598*^9, 
  3.521953381115137*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"makeHashtable", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5219533846851597`*^9, 3.5219533972426147`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"h", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.52195340220933*^9, 3.5219534046894817`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"keys", "[", "h", "]"}]], "Input",
 CellChangeTimes->{{3.521953408353367*^9, 3.521953410623335*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"values", "[", "h", "]"}]], "Input",
 CellChangeTimes->{{3.5219534127707787`*^9, 3.52195341543773*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Another datastructure ", "Text"],
 StyleBox["formalElement", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" represents is a ", "Text"],
 StyleBox["hashtable", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" which has weights as the keys and \nnumbers as the values. It is \
used to represent elements of formal exponents algebra such as module \n\
characters, singular elements of modules and hold branching coefficients. \
Addition, multiplication by\nnumber and by exponent of weight is implemented \
for formal elements.\nThere are special accessors ", "Text"],
 StyleBox["weights", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and ", "Text"],
 StyleBox["multiplicities", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[".", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.5219525209445267`*^9, 3.5219525250626173`*^9}, {3.521953424605048*^9, 
  3.52195361075413*^9}, {3.5219536452592154`*^9, 3.521953708810137*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"fe", "=", 
  RowBox[{"makeFormalElement", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"weight", "[", 
        SubscriptBox["B", "2"], "]"}], "[", 
       RowBox[{"1", ",", "0"}], "]"}], ",", 
      RowBox[{
       RowBox[{"weight", "[", 
        SubscriptBox["B", "2"], "]"}], "[", 
       RowBox[{"0", ",", "1"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521953560043442*^9, 3.521953575524802*^9}, {
  3.521953621865872*^9, 3.52195363501858*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"fe", "*", "2"}], ")"}], "[", "weights", "]"}]], "Input",
 CellChangeTimes->{{3.52195363769746*^9, 3.5219536391748877`*^9}, {
  3.5219536938266907`*^9, 3.521953719494111*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"fe", "*", "2"}], ")"}], "[", "multiplicities", "]"}]], "Input",
 CellChangeTimes->{{3.521953722910267*^9, 3.5219537294899893`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"fe", "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"weight", "[", 
       SubscriptBox["B", "2"], "]"}], "[", 
      RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ")"}], "[", "weights", 
  "]"}]], "Input",
 CellChangeTimes->{{3.521953735361981*^9, 3.521953754493465*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Modules", "Subtitle"],
 "\n",
 StyleBox["Lie algebra module is represented by the datastructure ", "Text"],
 StyleBox["module", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[". Module can be specified by \nits set of singular weights. \
Irreducible module possess ", "Text"],
 StyleBox["\n", "Code"],
 StyleBox["Weyl group invariance while parabolic Verma module is invariant \
with respect to subgroup of Lie algebra\nWeyl group. Verma modules are \
infinite-dimensional and we need to set some \nlimit of computations. So \
generic constructor has several parameters: ", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.5219525209445267`*^9, 3.5219525250626173`*^9}, 3.522985511184639*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"vm", "=", 
  RowBox[{
   RowBox[{"makeModule", "[", 
    SubscriptBox["B", "2"], "]"}], "[", 
   RowBox[{
    RowBox[{"makeFormalElement", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"weight", "[", 
         SubscriptBox["B", "2"], "]"}], "[", 
        RowBox[{"1", ",", "1"}], "]"}], "}"}], ",", 
      RowBox[{"{", "1", "}"}]}], "]"}], ",", 
    RowBox[{"emptyRootSystem", "[", "]"}], ",", "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521953090582919*^9, 3.5219531089761543`*^9}, {
  3.521953179537765*^9, 3.5219531798748713`*^9}, {3.5219537627523623`*^9, 
  3.5219538188560247`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["We have just constructed Verma module of Lie algebra \
B2. There are special constructors for irreducible, \nVerma and parabolic \
Verma modules:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"b2", "=", 
   RowBox[{"makeSimpleRootSystem", "[", 
    RowBox[{"B", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"vm", "=", 
   RowBox[{
    RowBox[{"makeVermaModule", "[", "b2", "]"}], "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", "5"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"pm", "=", 
   RowBox[{
    RowBox[{"makeParabolicVermaModule", "[", "b2", "]"}], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"weight", "[", "b2", "]"}], "[", 
      RowBox[{"2", ",", "1"}], "]"}], ",", 
     RowBox[{"{", "1", "}"}], ",", "5"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"im", "=", 
   RowBox[{
    RowBox[{"makeIrreducibleModule", "[", "b2", "]"}], "[", 
    RowBox[{"2", ",", "1"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.519624299626643*^9, 3.519624299630434*^9}, {
  3.519624363024329*^9, 3.5196243633112793`*^9}, {3.519624423572343*^9, 
  3.5196244279975147`*^9}, {3.519624513158197*^9, 3.519624610960773*^9}, {
  3.519624798570312*^9, 3.519624804397695*^9}, {3.519624842628511*^9, 
  3.5196248658947*^9}, {3.519625028692938*^9, 3.519625032534299*^9}, {
  3.5196250845520687`*^9, 3.51962508756955*^9}, {3.519625137959297*^9, 
  3.519625141980587*^9}, {3.519625254150527*^9, 3.519625255887246*^9}, {
  3.519625329597365*^9, 3.5196253452184963`*^9}, {3.5196253982420893`*^9, 
  3.519625403499021*^9}, {3.5219540222331142`*^9, 3.521954026470047*^9}, {
  3.521954151073328*^9, 3.5219541571058617`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Characters", "Subtitle"],
 "\n",
 StyleBox["Now we can demonstrate calculation of weight multiplicities in \
module characters. Function to calculate \nmultiplicities is called ", "Text"],
 StyleBox["character", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and it returns ", "Text"],
 StyleBox["formalElement", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" datastructure. We then can use \nsome additional code to plot \
nice figures. ", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.5219525209445267`*^9, 3.5219525250626173`*^9}, {3.521954073273682*^9, 
   3.521954078578287*^9}, 3.522985551426455*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"textPlot", "[", "f_formalElement", "]"}], ":=", 
   RowBox[{"drawPlaneProjection", "[", 
    RowBox[{"2", ",", "1", ",", "f", ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Frame", "\[Rule]", "True"}], ",", 
       RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}]}], ",", " ", 
       RowBox[{"PlotRangeClipping", "\[Rule]", "True"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.522204259118845*^9, 3.522204284810504*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"GraphicsRow", "[", 
  RowBox[{"textPlot", "/@", 
   RowBox[{"(", 
    RowBox[{"character", "/@", 
     RowBox[{"{", 
      RowBox[{"im", ",", "vm", ",", "pm"}], "}"}]}], ")"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.522204297727742*^9, 3.522204306638591*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["Our code is generic, it works for finite-dimensional \
and affine Lie algebras. But we need additional routine \nto plot weight \
multiplicities in affine case.", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"affinePlot", "[", 
   RowBox[{"f_formalElement", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Graphics", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"f", "[", "#", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"grade", "[", "#", "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", "finitePart", "]"}], "[", "standardBase", 
             "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}], "&"}], ")"}], "/@", 
     RowBox[{"f", "[", "weights", "]"}]}], ",", "opts"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5220401871914377`*^9, 3.522040239232897*^9}, {
  3.522040297469646*^9, 3.522040419916359*^9}, {3.5220405431903954`*^9, 
  3.5220405760013866`*^9}, {3.522040627910157*^9, 3.52204063169974*^9}, {
  3.522143524585524*^9, 3.52214353164401*^9}, {3.522204340498188*^9, 
  3.522204363533033*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["Now we can plot the character of affine Lie algebra \
A1.", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144477334271*^9, 3.522144494973666*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"affinePlot", "[", 
  RowBox[{
   RowBox[{"character", "[", 
    RowBox[{
     RowBox[{"makeIrreducibleModule", "[", 
      OverscriptBox[
       SubscriptBox["A", "1"], "^"], "]"}], "[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"Axes", "\[Rule]", "True"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5220404283337917`*^9, 3.522040478106638*^9}, {
  3.5220406526722717`*^9, 3.522040675801445*^9}, {3.522041356613391*^9, 
  3.5220414285556173`*^9}, {3.522144506985178*^9, 3.522144539698722*^9}, {
  3.522204371094652*^9, 3.5222043789782877`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["We see that result coicides with the tables in book of Moody, \
Patera et. al. \nAlso it is easy to notice Weyl symmetry of irreducible \
module. So it is enough to calculate multiplicities\nin main Weyl chamber \
only. \nThis multiplicities are conveniently encoded as string functions. \
Affine.m has special function \n", "Text"],
 StyleBox["stringFunctions", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" which calculates all string functions of module. So for A1 we can \
use it.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"stringFunctions", "[", 
  RowBox[{
   OverscriptBox[
    SubscriptBox["A", "1"], "^"], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522144751678562*^9, 3.5221447960209637`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["We can get less trivial results too:", "Text"]], \
"Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    OverscriptBox[
     SubscriptBox["B", "3"], "^"], "[", "gradeLimit", "]"}], "=", "5"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"stringFunctions", "[", 
  RowBox[{
   OverscriptBox[
    SubscriptBox["B", "3"], "^"], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5221448490835333`*^9, 3.522144892392564*^9}, {
   3.522991495238985*^9, 3.522991528143057*^9}, {3.522991580404098*^9, 
   3.522991584549396*^9}, {3.522994054994852*^9, 3.522994058956408*^9}, {
   3.522996264887041*^9, 3.522996280835821*^9}, 3.523007649851075*^9, {
   3.523007850205905*^9, 3.523007907022038*^9}, {3.523010591945053*^9, 
   3.5230106064131823`*^9}, {3.5230113985944023`*^9, 3.523011400005518*^9}, {
   3.523012429415351*^9, 3.523012429955172*^9}, {3.523012471056459*^9, 
   3.523012482416003*^9}, {3.523012647062954*^9, 3.523012648370734*^9}, {
   3.523012787309433*^9, 3.523012788097983*^9}, {3.52301348067846*^9, 
   3.523013481588131*^9}, {3.523014359905808*^9, 3.523014372859572*^9}, {
   3.523014403692524*^9, 3.5230144324565*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Branching", "Title"],
 "\n",
 StyleBox["Now we can consider the problem of decomposition of irreducible \
modules of Lie algebra into the sum\nof irreducible modules of subalgebra.\n\
One way to specify the subalgebra is to list its simple roots in the root \
space of algebra. E.g.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
   3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
   3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
   3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
   3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
   3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
   3.522144824138832*^9, 3.522144834593553*^9}, {3.522150832004524*^9, 
   3.522150842588929*^9}, 3.5229856197727327`*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"sub", "=", 
  RowBox[{"makeFiniteRootSystem", "[", 
   RowBox[{"{", 
    RowBox[{"Plus", " ", "@@", " ", 
     RowBox[{
      SubscriptBox["B", "2"], "[", "simpleRoots", "]"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5221509607668962`*^9, 3.522151011422659*^9}, {
  3.522203599321496*^9, 3.522203607862665*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 "Another way to specify subalgebra is to use function ",
 StyleBox["parabolicSubalgebra", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[", which constructs the root system of the subalgebra generated by \
the subset of algebra simple roots. For example, regular subalgebra A1 of \
algebra A2 with the root system spanned by the first simple root can be \
introduced by the code ", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
   3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
   3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
   3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
   3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
   3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
   3.522144824138832*^9, 3.522144834593553*^9}, {3.522150832004524*^9, 
   3.522150842588929*^9}, 3.5229856197727327`*^9, {3.5230103174967823`*^9, 
   3.5230104719714527`*^9}, {3.523010505479911*^9, 3.523010549500575*^9}, 
   3.52301123084934*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"sub2", "=", 
  RowBox[{
   RowBox[{"parabolicSubalgebra", "[", 
    SubscriptBox["A", "2"], "]"}], "[", "1", "]"}]}]], "Input",
 CellChangeTimes->{{3.5221509607668962`*^9, 3.522151011422659*^9}, {
  3.522203599321496*^9, 3.522203607862665*^9}, {3.523010482183289*^9, 
  3.523010520804296*^9}, {3.52301055343682*^9, 3.523010562651173*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["To calculate branching of irreducible module to irreducible \
modules of subalgebra use function ", "Text"],
 StyleBox["branching", "Code",
  FontVariations->{"Underline"->True}]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203307967121*^9, 3.5222033477904673`*^9}, {
  3.522204032570232*^9, 3.522204038036234*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"brc", "=", 
  RowBox[{"branching", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"makeIrreducibleModule", "[", 
      SubscriptBox["B", "2"], "]"}], "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "sub"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5222032582888813`*^9, 3.5222032747810926`*^9}, {
  3.522203354657351*^9, 3.522203395718841*^9}, {3.522203614500144*^9, 
  3.522203614937779*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["In this simple case of embedding A1->B2 we can \
compare the results by hand. First look at the weight diagram \nthe module:", \
"Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"textPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"makeIrreducibleModule", "[", 
     SubscriptBox["B", "2"], "]"}], "[", 
    RowBox[{"1", ",", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"Axes", "\[Rule]", "True"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522203486081004*^9, 3.522203523470376*^9}, {
  3.522203628310478*^9, 3.522203640042638*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"drawPlaneProjection", "[", 
  RowBox[{"1", ",", "2", ",", "brc", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Frame", "->", "True"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.5"}], ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.5"}], ",", "0.5"}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"PlotRangeClipping", "\[Rule]", "True"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5222035393620358`*^9, 3.522203579917947*^9}, {
  3.5222036541450253`*^9, 3.522203659054282*^9}, {3.5222036995067997`*^9, 
  3.522203790933279*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["The same function can be used for affine Lie \
algebras:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.522203868416325*^9, 
  3.52220388382092*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"suba", "=", 
   RowBox[{"makeAffineExtension", "[", "sub", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"brc", "=", 
  RowBox[{"branching", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"makeIrreducibleModule", "[", 
      OverscriptBox[
       SubscriptBox["B", "2"], "^"], "]"}], "[", 
     RowBox[{"1", ",", "1", ",", "1"}], "]"}], ",", "suba"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.5222038877449703`*^9, 3.522203925427321*^9}, {
  3.522204060405725*^9, 3.522204085000699*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["Now we can see branching coefficients in main Weyl \
chamber:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.522204481781803*^9, 
  3.522204498797613*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"affinePlot", "[", 
  RowBox[{"brc", ",", 
   RowBox[{"{", 
    RowBox[{"Frame", "\[Rule]", "True"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522204400289916*^9, 3.522204428605804*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["To get this result as the set of branching functions we can use \
function ", "Text"],
 StyleBox["branchingFunctions", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[", which has \nfollowing parameters: root system of algebra, root \
system of subalgebra and Dynkin labels of highest weight \nof algebra module. \
For example to get the above result use this code:", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.5222045202382708`*^9, 
  3.5222046720800037`*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"branchingFunctions", "[", 
  RowBox[{
   OverscriptBox[
    SubscriptBox["B", "2"], "^"], ",", "suba", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522204673737878*^9, 3.522204690420073*^9}}],

Cell[TextData[StyleBox["We can see that level of modules of subalgebra are \
not equal to the level of module of Lie algebra since \nwe have built the \
root system of A1-subalgebra on the short root of B2.", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.522204868119225*^9, 
  3.522204959674514*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"]
},
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
ShowSelection->True,
ShowCellTags->True,
FrontEndVersion->"8.0 for Linux x86 (64-bit) (November 7, 2010)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Text"->{
  Cell[557, 20, 689, 17, 105, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[1853, 56, 344, 8, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[2604, 79, 875, 21, 127, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[3753, 111, 674, 15, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[4821, 141, 275, 8, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[5475, 163, 301, 7, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[6166, 185, 754, 19, 105, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[7387, 221, 258, 7, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[8147, 246, 353, 10, 75, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[8702, 264, 297, 9, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[9226, 282, 224, 6, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[9627, 296, 284, 8, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[10326, 320, 351, 10, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[11185, 349, 575, 14, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[12478, 388, 332, 9, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[13074, 408, 629, 14, 105, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[14035, 435, 305, 7, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[14628, 454, 600, 14, 91, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[15578, 482, 474, 12, 75, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[16586, 513, 1040, 26, 109, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[18544, 571, 1307, 28, 131, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[21420, 653, 1043, 22, 163, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[23167, 698, 817, 14, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[25545, 753, 975, 22, 127, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[27737, 814, 934, 16, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[29787, 862, 877, 15, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[31339, 897, 1323, 24, 131, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[32981, 934, 907, 16, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[35095, 979, 1239, 23, 141, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[36746, 1017, 1462, 26, 95, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[38633, 1056, 1188, 22, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[40298, 1094, 1138, 19, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[42658, 1152, 1116, 19, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[44368, 1192, 1122, 19, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[45769, 1222, 1445, 26, 95, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[47500, 1259, 1243, 20, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"]},
 "Code"->{
  Cell[1249, 39, 601, 15, 81, "Input",
   InitializationCell->True,
   CellTags->"Code"],
  Cell[2200, 66, 401, 11, 81, "Input",
   CellTags->"Code"],
  Cell[3482, 102, 268, 7, 58, "Text",
   Evaluatable->True,
   CellTags->"Code"],
  Cell[4430, 128, 388, 11, 58, "Text",
   Evaluatable->True,
   CellTags->"Code"],
  Cell[5099, 151, 184, 4, 59, "Input",
   CellTags->"Code"],
  Cell[5286, 157, 186, 4, 59, "Input",
   CellTags->"Code"],
  Cell[5779, 172, 384, 11, 59, "Input",
   CellTags->"Code"],
  Cell[6923, 206, 461, 13, 59, "Input",
   CellTags->"Code"],
  Cell[7648, 230, 496, 14, 59, "Input",
   CellTags->"Code"],
  Cell[8503, 258, 196, 4, 59, "Input",
   CellTags->"Code"],
  Cell[9002, 275, 221, 5, 59, "Input",
   CellTags->"Code"],
  Cell[9453, 290, 171, 4, 59, "Input",
   CellTags->"Code"],
  Cell[9914, 306, 204, 5, 59, "Input",
   CellTags->"Code"],
  Cell[10121, 313, 202, 5, 59, "Input",
   CellTags->"Code"],
  Cell[10680, 332, 227, 6, 59, "Input",
   CellTags->"Code"],
  Cell[10910, 340, 272, 7, 59, "Input",
   CellTags->"Code"],
  Cell[11763, 365, 415, 12, 59, "Input",
   CellTags->"Code"],
  Cell[12181, 379, 294, 7, 59, "Input",
   CellTags->"Code"],
  Cell[12813, 399, 258, 7, 59, "Input",
   CellTags->"Code"],
  Cell[13706, 424, 326, 9, 59, "Input",
   CellTags->"Code"],
  Cell[14343, 444, 282, 8, 59, "Input",
   CellTags->"Code"],
  Cell[15231, 470, 344, 10, 59, "Input",
   CellTags->"Code"],
  Cell[16055, 496, 528, 15, 59, "Input",
   CellTags->"Code"],
  Cell[17629, 541, 362, 10, 59, "Input",
   CellTags->"Code"],
  Cell[17994, 553, 178, 4, 59, "Input",
   CellTags->"Code"],
  Cell[18175, 559, 180, 4, 59, "Input",
   CellTags->"Code"],
  Cell[18358, 565, 183, 4, 59, "Input",
   CellTags->"Code"],
  Cell[19854, 601, 643, 19, 59, "Input",
   CellTags->"Code"],
  Cell[20500, 622, 283, 7, 59, "Input",
   CellTags->"Code"],
  Cell[20786, 631, 240, 6, 59, "Input",
   CellTags->"Code"],
  Cell[21029, 639, 388, 12, 59, "Input",
   CellTags->"Code"],
  Cell[22466, 677, 698, 19, 59, "Input",
   CellTags->"Code"],
  Cell[23987, 714, 1555, 37, 117, "Input",
   CellTags->"Code"],
  Cell[26523, 777, 864, 23, 79, "Input",
   CellTags->"Code"],
  Cell[27390, 802, 344, 10, 59, "Input",
   CellTags->"Code"],
  Cell[28674, 832, 1110, 28, 79, "Input",
   CellTags->"Code"],
  Cell[30667, 879, 669, 16, 62, "Input",
   CellTags->"Code"],
  Cell[32665, 923, 313, 9, 62, "Input",
   CellTags->"Code"],
  Cell[33891, 952, 1201, 25, 81, "Input",
   CellTags->"Code"],
  Cell[36337, 1004, 406, 11, 59, "Input",
   CellTags->"Code"],
  Cell[38211, 1045, 419, 9, 59, "Input",
   CellTags->"Code"],
  Cell[39824, 1080, 471, 12, 59, "Input",
   CellTags->"Code"],
  Cell[41439, 1115, 446, 12, 59, "Input",
   CellTags->"Code"],
  Cell[41888, 1129, 767, 21, 59, "Input",
   CellTags->"Code"],
  Cell[43777, 1173, 588, 17, 81, "Input",
   CellTags->"Code"],
  Cell[45493, 1213, 273, 7, 59, "Input",
   CellTags->"Code"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Text", 49070, 1293},
 {"Code", 52182, 1402}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 689, 17, 105, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[1249, 39, 601, 15, 81, "Input",
 InitializationCell->True,
 CellTags->"Code"],
Cell[1853, 56, 344, 8, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[2200, 66, 401, 11, 81, "Input",
 CellTags->"Code"],
Cell[2604, 79, 875, 21, 127, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[3482, 102, 268, 7, 58, "Text",
 Evaluatable->True,
 CellTags->"Code"],
Cell[3753, 111, 674, 15, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[4430, 128, 388, 11, 58, "Text",
 Evaluatable->True,
 CellTags->"Code"],
Cell[4821, 141, 275, 8, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[5099, 151, 184, 4, 59, "Input",
 CellTags->"Code"],
Cell[5286, 157, 186, 4, 59, "Input",
 CellTags->"Code"],
Cell[5475, 163, 301, 7, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[5779, 172, 384, 11, 59, "Input",
 CellTags->"Code"],
Cell[6166, 185, 754, 19, 105, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[6923, 206, 461, 13, 59, "Input",
 CellTags->"Code"],
Cell[7387, 221, 258, 7, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[7648, 230, 496, 14, 59, "Input",
 CellTags->"Code"],
Cell[8147, 246, 353, 10, 75, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[8503, 258, 196, 4, 59, "Input",
 CellTags->"Code"],
Cell[8702, 264, 297, 9, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[9002, 275, 221, 5, 59, "Input",
 CellTags->"Code"],
Cell[9226, 282, 224, 6, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[9453, 290, 171, 4, 59, "Input",
 CellTags->"Code"],
Cell[9627, 296, 284, 8, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[9914, 306, 204, 5, 59, "Input",
 CellTags->"Code"],
Cell[10121, 313, 202, 5, 59, "Input",
 CellTags->"Code"],
Cell[10326, 320, 351, 10, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[10680, 332, 227, 6, 59, "Input",
 CellTags->"Code"],
Cell[10910, 340, 272, 7, 59, "Input",
 CellTags->"Code"],
Cell[11185, 349, 575, 14, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[11763, 365, 415, 12, 59, "Input",
 CellTags->"Code"],
Cell[12181, 379, 294, 7, 59, "Input",
 CellTags->"Code"],
Cell[12478, 388, 332, 9, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[12813, 399, 258, 7, 59, "Input",
 CellTags->"Code"],
Cell[13074, 408, 629, 14, 105, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[13706, 424, 326, 9, 59, "Input",
 CellTags->"Code"],
Cell[14035, 435, 305, 7, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[14343, 444, 282, 8, 59, "Input",
 CellTags->"Code"],
Cell[14628, 454, 600, 14, 91, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[15231, 470, 344, 10, 59, "Input",
 CellTags->"Code"],
Cell[15578, 482, 474, 12, 75, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[16055, 496, 528, 15, 59, "Input",
 CellTags->"Code"],
Cell[16586, 513, 1040, 26, 109, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[17629, 541, 362, 10, 59, "Input",
 CellTags->"Code"],
Cell[17994, 553, 178, 4, 59, "Input",
 CellTags->"Code"],
Cell[18175, 559, 180, 4, 59, "Input",
 CellTags->"Code"],
Cell[18358, 565, 183, 4, 59, "Input",
 CellTags->"Code"],
Cell[18544, 571, 1307, 28, 131, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[19854, 601, 643, 19, 59, "Input",
 CellTags->"Code"],
Cell[20500, 622, 283, 7, 59, "Input",
 CellTags->"Code"],
Cell[20786, 631, 240, 6, 59, "Input",
 CellTags->"Code"],
Cell[21029, 639, 388, 12, 59, "Input",
 CellTags->"Code"],
Cell[21420, 653, 1043, 22, 163, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[22466, 677, 698, 19, 59, "Input",
 CellTags->"Code"],
Cell[23167, 698, 817, 14, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[23987, 714, 1555, 37, 117, "Input",
 CellTags->"Code"],
Cell[25545, 753, 975, 22, 127, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[26523, 777, 864, 23, 79, "Input",
 CellTags->"Code"],
Cell[27390, 802, 344, 10, 59, "Input",
 CellTags->"Code"],
Cell[27737, 814, 934, 16, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[28674, 832, 1110, 28, 79, "Input",
 CellTags->"Code"],
Cell[29787, 862, 877, 15, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[30667, 879, 669, 16, 62, "Input",
 CellTags->"Code"],
Cell[31339, 897, 1323, 24, 131, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[32665, 923, 313, 9, 62, "Input",
 CellTags->"Code"],
Cell[32981, 934, 907, 16, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[33891, 952, 1201, 25, 81, "Input",
 CellTags->"Code"],
Cell[35095, 979, 1239, 23, 141, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[36337, 1004, 406, 11, 59, "Input",
 CellTags->"Code"],
Cell[36746, 1017, 1462, 26, 95, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[38211, 1045, 419, 9, 59, "Input",
 CellTags->"Code"],
Cell[38633, 1056, 1188, 22, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[39824, 1080, 471, 12, 59, "Input",
 CellTags->"Code"],
Cell[40298, 1094, 1138, 19, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[41439, 1115, 446, 12, 59, "Input",
 CellTags->"Code"],
Cell[41888, 1129, 767, 21, 59, "Input",
 CellTags->"Code"],
Cell[42658, 1152, 1116, 19, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[43777, 1173, 588, 17, 81, "Input",
 CellTags->"Code"],
Cell[44368, 1192, 1122, 19, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[45493, 1213, 273, 7, 59, "Input",
 CellTags->"Code"],
Cell[45769, 1222, 1445, 26, 95, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[47217, 1250, 280, 7, 33, "Input"],
Cell[47500, 1259, 1243, 20, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"]
}
]
*)

(* End of internal cache information *)
