(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    126613,       3446]
NotebookOptionsPosition[    108019,       2780]
NotebookOutlinePosition[    117241,       3087]
CellTagsIndexPosition[    117147,       3081]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["Demonstration of ", "Title"],
 StyleBox["Affine.m", "Title",
  FontSlant->"Italic"],
 StyleBox[" usage", "Title"],
 "\n",
 StyleBox["First we need to setup path and load the package", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873247139276*^9, 3.521873270215405*^9}, {
   3.521873317159025*^9, 3.5218733183659353`*^9}, {3.521873874978292*^9, 
   3.52187402707727*^9}, {3.52187416321414*^9, 3.52187416458253*^9}, {
   3.522904276810939*^9, 3.5229042790499067`*^9}, 3.522984643613719*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"$Path", ",", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
     "\"\<../src/\>\""}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", "affine.m"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511850132957571*^9, 3.51185016527726*^9}, {
   3.514881427513479*^9, 3.514881432925623*^9}, {3.521873174179186*^9, 
   3.521873192522464*^9}, 3.521873393683514*^9, {3.521873520093526*^9, 
   3.5218735398350573`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["Or we can run unit tests to see that package works \
correctly:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873326641025*^9, 3.521873371817109*^9}, {
  3.522143576451425*^9, 3.522143591079445*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"$Path", ",", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
     "\"\<../tests/\>\""}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", "tests.m"}], ";"}]}], "Input",
 CellChangeTimes->{{3.52214360552756*^9, 3.522143612433168*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData["\<\"All tests completed\"\>"], "Print",
 CellChangeTimes->{3.522985877364559*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Weights", "Subtitle"],
 "\n",
 StyleBox["We review basic datastructures. \n", "Text"],
 StyleBox["finiteWeight",
  FontVariations->{"Underline"->True}],
 StyleBox[" and ", "Text"],
 StyleBox["affineWeight", "Program",
  FontVariations->{"Underline"->True}],
 StyleBox[" are used to represent weights of finite-dimensional and \naffine \
Lie algebra weights correspondingly.  We have following generic \
constructors:", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952431431405*^9, 3.5219524368895597`*^9}, 3.522985032888318*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"makeFiniteWeight", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}]], "Text",
 Evaluatable->True,
 CellChangeTimes->{{3.521874237838254*^9, 3.521874291603204*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteWeight", "[", 
  RowBox[{"3", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.5229858775671387`*^9},
 CellTags->"Code"],

Cell[TextData[{
 "Here the argument of constructor is the list of coordinates in orthogonal \
basis",
 StyleBox[".\nConstructor for affine LIe algebra weights is similar but it \
also needs level and grade of weight.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521874503291995*^9, 3.5218745078972883`*^9}, {3.5218746640868883`*^9, 
  3.521874696022236*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{"aw", "=", 
  RowBox[{"makeAffineWeight", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2"}], "}"}], ",", " ", "2", ",", " ", "3"}], 
   "]"}]}]], "Text",
 Evaluatable->True,
 CellChangeTimes->{{3.521874321661553*^9, 3.521874335492091*^9}, {
  3.521874533674336*^9, 3.521874585669978*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"affineWeight", "[", 
  RowBox[{"2", ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", "2", ",", "3"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.52298587760754*^9},
 CellTags->"Code"],

Cell["\<\
We can get level and grade of affine weight with the functions:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"level", "[", "aw", "]"}]], "Input",
 CellChangeTimes->{{3.5218745879141293`*^9, 3.521874590284514*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.522985877763505*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grade", "[", "aw", "]"}]], "Input",
 CellChangeTimes->{{3.5218745926516333`*^9, 3.5218745955480757`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.522985877808118*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["We can add and multiply weights by numbers. ", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.5218776827531633`*^9, 3.5218776976502533`*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"makeFiniteWeight", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}], "+", 
  RowBox[{"2", "*", 
   RowBox[{"makeFiniteWeight", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.5218777030156403`*^9, 3.521877721067938*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteWeight", "[", 
  RowBox[{"2", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.522985877914961*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Root systems", "Subtitle"],
 "\n",
 "Now we can introduce root systems. We can specify root system by hand by \
listing the set of simple roots. For example to specify the root system of \
algebra ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["B", "2"], TraditionalForm]]],
 " (so(5)) we can use this code:"
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952463187976*^9, 3.5219524670070477`*^9}, 3.52298514509665*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"makeFiniteRootSystem", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"makeFiniteWeight", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], "]"}], ",", 
    RowBox[{"makeFiniteWeight", "[", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.52187485537164*^9, 3.521874905075886*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteRootSystem", "[", 
  RowBox[{"2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.522985877967083*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["Or in more concise form:", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.5218749128347273`*^9, 3.521874931166287*^9}, 
   3.5218750081183243`*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rs", "=", 
  RowBox[{"makeFiniteRootSystem", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521874936696598*^9, 3.521874951770589*^9}, {
  3.521875011227066*^9, 3.521875011925099*^9}, {3.521875077254133*^9, 
  3.521875078703928*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteRootSystem", "[", 
  RowBox[{"2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.522985878001676*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["\<\
Root systems of (non-twisted) affine Lie algebras are constructed as 
affine extensions of finite-dimensional ones:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521875045646961*^9, 3.521875091176461*^9}, 
   3.521952970570891*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"makeAffineExtension", "[", "rs", "]"}]], "Input",
 CellChangeTimes->{{3.521875094316946*^9, 3.521875100293325*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"affineRootSystem", "[", 
  RowBox[{"2", ",", 
   RowBox[{"finiteRootSystem", "[", 
    RowBox[{"2", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"finiteWeight", "[", 
        RowBox[{"2", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"finiteWeight", "[", 
        RowBox[{"2", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"affineWeight", "[", 
    RowBox[{"2", ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", "0", ",", "1"}], "]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"affineWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"finiteWeight", "[", 
        RowBox[{"2", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", "0", ",", "0"}], "]"}], 
     ",", 
     RowBox[{"affineWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"finiteWeight", "[", 
        RowBox[{"2", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", "0", ",", "0"}], 
      "]"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.522985878034721*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["\<\
We have special constructors for root systems of simple Lie algebras. Long \
form is\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.5218752754950743`*^9, 3.52187532124365*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"makeSimpleRootSystem", "[", 
  RowBox[{"C", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.5218753229238987`*^9, 3.521875329653369*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteRootSystem", "[", 
  RowBox[{"3", ",", "3", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{3.5229858781474543`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["Concise form is just", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521875337444303*^9, 3.521875342403859*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 SubscriptBox["C", "3"]], "Input",
 CellChangeTimes->{{3.521875345351853*^9, 3.521875348928938*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteRootSystem", "[", 
  RowBox[{"3", ",", "3", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"3", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{3.5229858781790524`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["\<\
Now we can get some properties of root system and algebra. For example\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.5218753813096247`*^9, 3.521875412253256*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rank", "[", 
  SubscriptBox["C", "3"], "]"}]], "Input",
 CellChangeTimes->{{3.5218754164155607`*^9, 3.521875420485729*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.522985878273384*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"roots", "[", 
  SubscriptBox["C", "3"], "]"}]], "Input",
 CellChangeTimes->{{3.52187542783949*^9, 3.521875432307357*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1", ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "2"}], ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", 
       RowBox[{"-", "2"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.522985878401528*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["\<\
To specify root system of semisimple Lie algebra we can use following natural \
notation\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.5218777592829733`*^9, 3.521877781823497*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["C", "3"], "\[CirclePlus]", 
  SubscriptBox["B", "2"]}]], "Input",
 CellChangeTimes->{{3.52187778601694*^9, 3.521877815911873*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteRootSystem", "[", 
  RowBox[{"5", ",", "5", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", 
         RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "2", ",", "0", ",", "0"}], "}"}]}], "]"}],
      ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"5", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}]}], 
      "]"}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.522985878504225*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"positiveRoots", "[", 
  RowBox[{
   SubscriptBox["A", "1"], "\[CirclePlus]", 
   SubscriptBox["B", "2"]}], "]"}]], "Input",
 CellChangeTimes->{{3.521952546497574*^9, 3.5219525700953627`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"finiteWeight", "[", 
    RowBox[{"4", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"4", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"4", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"4", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"4", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.522985879106608*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 "We can use hat to specify (non-twisted) affine extension of \
finite-dimensional root system. \nFunction ",
 StyleBox["cartanMatrix", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" calculate Cartan matrix corresponding to root system.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.5218777592829733`*^9, 3.521877781823497*^9}, {3.522205153589662*^9, 
  3.522205215611411*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cartanMatrix", "[", 
   OverscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["A", "3"], "\[CirclePlus]", 
      SubscriptBox["B", "2"]}], ")"}], "^"], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.5222050617596416`*^9, 3.522205062748065*^9}, {
  3.52220509348536*^9, 3.5222051242250757`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "0", "0", "0", "0", 
      RowBox[{"-", "1"}]},
     {"0", "2", 
      RowBox[{"-", "1"}], "0", "0", "0"},
     {"0", 
      RowBox[{"-", "1"}], "2", 
      RowBox[{"-", "1"}], "0", "0"},
     {"0", "0", 
      RowBox[{"-", "1"}], "2", "0", "0"},
     {"0", "0", "0", "0", "2", 
      RowBox[{"-", "1"}]},
     {
      RowBox[{"-", "2"}], "0", "0", "0", 
      RowBox[{"-", "2"}], "2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.5229858797117577`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cartanMatrix", "[", 
   SubscriptBox["A", "2"], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.522205083738069*^9, 3.52220508970418*^9}, {
  3.522205131070181*^9, 3.5222051362877293`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", 
      RowBox[{"-", "1"}]},
     {
      RowBox[{"-", "1"}], "2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.5229858804138536`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["\<\
If we specify root system we can use Dynkin labels to construct weight:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878076807229*^9, 3.521878097048913*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"weight", "[", 
   SubscriptBox["B", "2"], "]"}], "[", 
  RowBox[{"1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5218780991276693`*^9, 3.521878104134664*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteWeight", "[", 
  RowBox[{"2", ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "2"], ",", 
     FractionBox["1", "2"]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.522985880513266*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Weyl group", "Subtitle"],
 "\n",
 "Weyl group is generated by reflections corresponding to simple roots. So we \
can specify Weyl group element\nby the sequence of simple reflection."
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952489218959*^9, 3.521952492891446*^9}, 3.52298544353277*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{
    RowBox[{"weylGroupElement", "[", 
     SubscriptBox["B", "2"], "]"}], "[", 
    RowBox[{"1", ",", "2", ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5218779645228243`*^9, 3.521878001554697*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell["Then we can act by Weyl group element on some weight", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878012949891*^9, 3.521878033498893*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "@", 
  RowBox[{
   RowBox[{"weight", "[", 
    SubscriptBox["B", "2"], "]"}], "[", 
   RowBox[{"1", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521878042025902*^9, 3.521878054735639*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteWeight", "[", 
  RowBox[{"2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     FractionBox["1", "2"]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.5229858806438513`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["\<\
It is possible to calculate Weyl group orbit of some weight. This and related \
functions which calculate orbits 
with the parity of Weyl group elements are of crucial importance in our \
approach to calculation of weight 
multiplicities in Lie algebra modules and branching coefficients.\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878012949891*^9, 3.521878033498893*^9}, {3.5218910732264357`*^9, 
  3.521891209294622*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"orbit", "[", 
   SubscriptBox["B", "2"], "]"}], "[", 
  RowBox[{
   RowBox[{"weight", "[", 
    SubscriptBox["B", "2"], "]"}], "[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5218912114774427`*^9, 3.521891233007352*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"finiteWeight", "[", 
     RowBox[{"2", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "2"}]}], "}"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "1"}], "}"}]}], "]"}], ",", 
     RowBox[{"finiteWeight", "[", 
      RowBox[{"2", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "2"}]}], "}"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"finiteWeight", "[", 
     RowBox[{"2", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", 
        RowBox[{"-", "1"}]}], "}"}]}], "]"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.522985880754974*^9},
 CellTags->"Code"]
}, Open  ]],

Cell["\<\
Some times it is more convenient to look not at the coordinates in orthogonal \
basis, 
but at Dynkin labels of weights. So we can present previous result this way:\
\>", "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521874733571144*^9, 3.521874754188884*^9}, {
  3.521878012949891*^9, 3.521878033498893*^9}, {3.521891251722952*^9, 
  3.521891328344763*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"dynkinLabels", "[", 
   SubscriptBox["B", "2"], "]"}], "/@", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"orbit", "[", 
     SubscriptBox["B", "2"], "]"}], "[", 
    RowBox[{
     RowBox[{"weight", "[", 
      SubscriptBox["B", "2"], "]"}], "[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5218913376051207`*^9, 3.521891348519423*^9}, {
  3.521891596885304*^9, 3.5218916047996492`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"-", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"-", "4"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "4"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "2"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5229858811937637`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Auxiliary datastructures  \n", "Subtitle"],
 StyleBox["Two auxiliary datastructures are important for what follows. First \
one is ", "Text"],
 StyleBox["hashtable", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" which is implemented \nwith ", "Text"],
 StyleBox["DownValues", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and have functions ", "Text"],
 StyleBox["keys", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and ", "Text"],
 StyleBox["values", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[":", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.5219525209445267`*^9, 3.5219525250626173`*^9}, {3.521953202921598*^9, 
  3.521953381115137*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "=", 
  RowBox[{"makeHashtable", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5219533846851597`*^9, 3.5219533972426147`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData["Affine`Private`table$5358"], "Output",
 CellChangeTimes->{3.5229858812415943`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.52195340220933*^9, 3.5219534046894817`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.522985881313383*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"keys", "[", "h", "]"}]], "Input",
 CellChangeTimes->{{3.521953408353367*^9, 3.521953410623335*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c"}], "}"}]], "Output",
 CellChangeTimes->{3.5229858814091463`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"values", "[", "h", "]"}]], "Input",
 CellChangeTimes->{{3.5219534127707787`*^9, 3.52195341543773*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.5229858814378643`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Another datastructure ", "Text"],
 StyleBox["formalElement", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" represents is a ", "Text"],
 StyleBox["hashtable", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" which has weights as the keys and \nnumbers as the values. It is \
used to represent elements of formal exponents algebra such as module \n\
characters, singular elements of modules and hold branching coefficients. \
Addition, multiplication by\nnumber and by exponent of weight is implemented \
for formal elements.\nThere are special accessors ", "Text"],
 StyleBox["weights", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and ", "Text"],
 StyleBox["multiplicities", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[".", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.5219525209445267`*^9, 3.5219525250626173`*^9}, {3.521953424605048*^9, 
  3.52195361075413*^9}, {3.5219536452592154`*^9, 3.521953708810137*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fe", "=", 
  RowBox[{"makeFormalElement", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"weight", "[", 
        SubscriptBox["B", "2"], "]"}], "[", 
       RowBox[{"1", ",", "0"}], "]"}], ",", 
      RowBox[{
       RowBox[{"weight", "[", 
        SubscriptBox["B", "2"], "]"}], "[", 
       RowBox[{"0", ",", "1"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521953560043442*^9, 3.521953575524802*^9}, {
  3.521953621865872*^9, 3.52195363501858*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"formalElement", "[", "Affine`Private`table$5360", "]"}]], "Output",
 CellChangeTimes->{3.5229858815356293`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"fe", "*", "2"}], ")"}], "[", "weights", "]"}]], "Input",
 CellChangeTimes->{{3.52195363769746*^9, 3.5219536391748877`*^9}, {
  3.5219536938266907`*^9, 3.521953719494111*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"finiteWeight", "[", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "2"], ",", 
       FractionBox["1", "2"]}], "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.52298588158104*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"fe", "*", "2"}], ")"}], "[", "multiplicities", "]"}]], "Input",
 CellChangeTimes->{{3.521953722910267*^9, 3.5219537294899893`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.522985881611161*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"fe", "*", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"weight", "[", 
       SubscriptBox["B", "2"], "]"}], "[", 
      RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ")"}], "[", "weights", 
  "]"}]], "Input",
 CellChangeTimes->{{3.521953735361981*^9, 3.521953754493465*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"finiteWeight", "[", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["5", "2"], ",", 
       FractionBox["1", "2"]}], "}"}]}], "]"}], ",", 
   RowBox[{"finiteWeight", "[", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.522985881712195*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Modules", "Subtitle"],
 "\n",
 StyleBox["Lie algebra module is represented by the datastructure ", "Text"],
 StyleBox["module", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[". Module can be specified by \nits set of singular weights. \
Irreducible module possess ", "Text"],
 StyleBox["\n", "Code"],
 StyleBox["Weyl group invariance while parabolic Verma module is invariant \
with respect to subgroup of Lie algebra\nWeyl group. Verma modules are \
infinite-dimensional and we need to set some \nlimit of computations. So \
generic constructor has several parameters: ", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.5219525209445267`*^9, 3.5219525250626173`*^9}, 3.522985511184639*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vm", "=", 
  RowBox[{
   RowBox[{"makeModule", "[", 
    SubscriptBox["B", "2"], "]"}], "[", 
   RowBox[{
    RowBox[{"makeFormalElement", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"weight", "[", 
         SubscriptBox["B", "2"], "]"}], "[", 
        RowBox[{"1", ",", "1"}], "]"}], "}"}], ",", 
      RowBox[{"{", "1", "}"}]}], "]"}], ",", 
    RowBox[{"emptyRootSystem", "[", "]"}], ",", "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.521953090582919*^9, 3.5219531089761543`*^9}, {
  3.521953179537765*^9, 3.5219531798748713`*^9}, {3.5219537627523623`*^9, 
  3.5219538188560247`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"module", "[", 
  RowBox[{
   RowBox[{"finiteRootSystem", "[", 
    RowBox[{"2", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"finiteWeight", "[", 
        RowBox[{"2", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{"finiteWeight", "[", 
        RowBox[{"2", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"formalElement", "[", "Affine`Private`table$5369", "]"}], ",", 
   RowBox[{"emptyRootSystem", "[", "]"}], ",", "5"}], "]"}]], "Output",
 CellChangeTimes->{3.522985881748303*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[StyleBox["We have just constructed Verma module of Lie algebra \
B2. There are special constructors for irreducible, \nVerma and parabolic \
Verma modules:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"b2", "=", 
   RowBox[{"makeSimpleRootSystem", "[", 
    RowBox[{"B", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"vm", "=", 
   RowBox[{
    RowBox[{"makeVermaModule", "[", "b2", "]"}], "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", "5"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"pm", "=", 
   RowBox[{
    RowBox[{"makeParabolicVermaModule", "[", "b2", "]"}], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"weight", "[", "b2", "]"}], "[", 
      RowBox[{"2", ",", "1"}], "]"}], ",", 
     RowBox[{"{", "1", "}"}], ",", "5"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"im", "=", 
   RowBox[{
    RowBox[{"makeIrreducibleModule", "[", "b2", "]"}], "[", 
    RowBox[{"2", ",", "1"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.519624299626643*^9, 3.519624299630434*^9}, {
  3.519624363024329*^9, 3.5196243633112793`*^9}, {3.519624423572343*^9, 
  3.5196244279975147`*^9}, {3.519624513158197*^9, 3.519624610960773*^9}, {
  3.519624798570312*^9, 3.519624804397695*^9}, {3.519624842628511*^9, 
  3.5196248658947*^9}, {3.519625028692938*^9, 3.519625032534299*^9}, {
  3.5196250845520687`*^9, 3.51962508756955*^9}, {3.519625137959297*^9, 
  3.519625141980587*^9}, {3.519625254150527*^9, 3.519625255887246*^9}, {
  3.519625329597365*^9, 3.5196253452184963`*^9}, {3.5196253982420893`*^9, 
  3.519625403499021*^9}, {3.5219540222331142`*^9, 3.521954026470047*^9}, {
  3.521954151073328*^9, 3.5219541571058617`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[{
 StyleBox["Characters", "Subtitle"],
 "\n",
 StyleBox["Now we can demonstrate calculation of weight multiplicities in \
module characters. Function to calculate \nmultiplicities is called ", "Text"],
 StyleBox["character", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" and it returns ", "Text"],
 StyleBox["formalElement", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" datastructure. We then can use \nsome additional code to plot \
nice figures. ", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.5219525209445267`*^9, 3.5219525250626173`*^9}, {3.521954073273682*^9, 
   3.521954078578287*^9}, 3.522985551426455*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"textPlot", "[", "f_formalElement", "]"}], ":=", 
   RowBox[{"drawPlaneProjection", "[", 
    RowBox[{"2", ",", "1", ",", "f", ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Frame", "\[Rule]", "True"}], ",", 
       RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "}"}]}], ",", " ", 
       RowBox[{"PlotRangeClipping", "\[Rule]", "True"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.522204259118845*^9, 3.522204284810504*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsRow", "[", 
  RowBox[{"textPlot", "/@", 
   RowBox[{"(", 
    RowBox[{"character", "/@", 
     RowBox[{"{", 
      RowBox[{"im", ",", "vm", ",", "pm"}], "}"}]}], ")"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.522204297727742*^9, 3.522204306638591*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       InsetBox["1", NCache[{Rational[-3, 2], Rational[3, 2]}, {-1.5, 1.5}]], 
       InsetBox["3", NCache[{Rational[1, 2], Rational[1, 2]}, {0.5, 0.5}]], 
       InsetBox["2", 
        NCache[{Rational[-1, 2], Rational[-3, 2]}, {-0.5, -1.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[-1, 2]}, {2.5, -0.5}]], 
       InsetBox["1", 
        NCache[{Rational[-5, 2], Rational[-1, 2]}, {-2.5, -0.5}]], 
       InsetBox["1", NCache[{Rational[-5, 2], Rational[1, 2]}, {-2.5, 0.5}]], 
       InsetBox["1", NCache[{Rational[3, 2], Rational[3, 2]}, {1.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[1, 2], Rational[5, 2]}, {0.5, 2.5}]], 
       InsetBox["2", NCache[{Rational[1, 2], Rational[-3, 2]}, {0.5, -1.5}]], 
       InsetBox["2", NCache[{Rational[3, 2], Rational[1, 2]}, {1.5, 0.5}]], 
       InsetBox["2", 
        NCache[{Rational[-3, 2], Rational[-1, 2]}, {-1.5, -0.5}]], 
       InsetBox["2", NCache[{Rational[3, 2], Rational[-1, 2]}, {1.5, -0.5}]], 
       InsetBox["1", NCache[{Rational[-1, 2], Rational[5, 2]}, {-0.5, 2.5}]], 
       InsetBox["3", NCache[{Rational[-1, 2], Rational[1, 2]}, {-0.5, 0.5}]], 
       InsetBox["2", NCache[{Rational[1, 2], Rational[3, 2]}, {0.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[1, 2]}, {2.5, 0.5}]], 
       InsetBox["1", 
        NCache[{Rational[-1, 2], Rational[-5, 2]}, {-0.5, -2.5}]], 
       InsetBox["1", 
        NCache[{Rational[-3, 2], Rational[-3, 2]}, {-1.5, -1.5}]], 
       InsetBox["3", NCache[{Rational[1, 2], Rational[-1, 2]}, {0.5, -0.5}]], 
       InsetBox["2", NCache[{Rational[-3, 2], Rational[1, 2]}, {-1.5, 0.5}]], 
       InsetBox["3", 
        NCache[{Rational[-1, 2], Rational[-1, 2]}, {-0.5, -0.5}]], 
       InsetBox["1", NCache[{Rational[1, 2], Rational[-5, 2]}, {0.5, -2.5}]], 
       InsetBox["2", NCache[{Rational[-1, 2], Rational[3, 2]}, {-0.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[3, 2], Rational[-3, 2]}, {1.5, -1.5}]]},
      
      Frame->True,
      GridLines->Automatic,
      PlotRange->{{-3, 3}, {-3, 3}},
      PlotRangeClipping->True], {193.5, -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}], InsetBox[
     GraphicsBox[{
       InsetBox["1", NCache[{Rational[1, 2], Rational[5, 2]}, {0.5, 2.5}]], 
       InsetBox["1", NCache[{Rational[11, 2], Rational[-5, 2]}, {5.5, -2.5}]],
        InsetBox["4", NCache[{Rational[1, 2], Rational[1, 2]}, {0.5, 0.5}]], 
       InsetBox["2", NCache[{Rational[7, 2], Rational[-3, 2]}, {3.5, -1.5}]], 
       InsetBox["3", NCache[{Rational[-3, 2], Rational[3, 2]}, {-1.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[-7, 2], Rational[5, 2]}, {-3.5, 2.5}]], 
       InsetBox["2", NCache[{Rational[5, 2], Rational[-1, 2]}, {2.5, -0.5}]], 
       InsetBox["1", NCache[{Rational[-3, 2], Rational[5, 2]}, {-1.5, 2.5}]], 
       InsetBox["5", NCache[{Rational[-1, 2], Rational[1, 2]}, {-0.5, 0.5}]], 
       InsetBox["1", NCache[{Rational[9, 2], Rational[-3, 2]}, {4.5, -1.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[1, 2]}, {2.5, 0.5}]], 
       InsetBox["1", NCache[{Rational[-9, 2], Rational[5, 2]}, {-4.5, 2.5}]], 
       InsetBox["1", NCache[{Rational[3, 2], Rational[3, 2]}, {1.5, 1.5}]], 
       InsetBox["4", NCache[{Rational[3, 2], Rational[-1, 2]}, {1.5, -0.5}]], 
       InsetBox["3", NCache[{Rational[-5, 2], Rational[3, 2]}, {-2.5, 1.5}]], 
       InsetBox["2", NCache[{Rational[3, 2], Rational[1, 2]}, {1.5, 0.5}]], 
       InsetBox["3", NCache[{Rational[-1, 2], Rational[3, 2]}, {-0.5, 1.5}]], 
       InsetBox["2", NCache[{Rational[1, 2], Rational[3, 2]}, {0.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[-5, 2], Rational[5, 2]}, {-2.5, 2.5}]], 
       InsetBox["1", NCache[{Rational[-1, 2], Rational[5, 2]}, {-0.5, 2.5}]], 
       InsetBox["1", NCache[{Rational[7, 2], Rational[-1, 2]}, {3.5, -0.5}]]},
      
      Frame->True,
      GridLines->Automatic,
      PlotRange->{{-3, 3}, {-3, 3}},
      PlotRangeClipping->True], {580.5, -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}], InsetBox[
     GraphicsBox[{
       InsetBox["1", NCache[{Rational[5, 2], Rational[-9, 2]}, {2.5, -4.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[-7, 2]}, {2.5, -3.5}]], 
       InsetBox["3", NCache[{Rational[-1, 2], Rational[3, 2]}, {-0.5, 1.5}]], 
       InsetBox["5", NCache[{Rational[1, 2], Rational[-1, 2]}, {0.5, -0.5}]], 
       InsetBox["3", NCache[{Rational[-5, 2], Rational[3, 2]}, {-2.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[-1, 2], Rational[5, 2]}, {-0.5, 2.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[1, 2]}, {2.5, 0.5}]], 
       InsetBox["6", NCache[{Rational[1, 2], Rational[-3, 2]}, {0.5, -1.5}]], 
       InsetBox["1", NCache[{Rational[1, 2], Rational[5, 2]}, {0.5, 2.5}]], 
       InsetBox["3", NCache[{Rational[3, 2], Rational[-5, 2]}, {1.5, -2.5}]], 
       InsetBox["1", NCache[{Rational[3, 2], Rational[3, 2]}, {1.5, 1.5}]], 
       InsetBox["3", NCache[{Rational[-7, 2], Rational[3, 2]}, {-3.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[-7, 2], Rational[5, 2]}, {-3.5, 2.5}]], 
       InsetBox["2", NCache[{Rational[1, 2], Rational[3, 2]}, {0.5, 1.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[-5, 2]}, {2.5, -2.5}]], 
       InsetBox["8", 
        NCache[{Rational[-3, 2], Rational[-1, 2]}, {-1.5, -0.5}]], 
       InsetBox["1", NCache[{Rational[-3, 2], Rational[5, 2]}, {-1.5, 2.5}]], 
       InsetBox["4", NCache[{Rational[1, 2], Rational[1, 2]}, {0.5, 0.5}]], 
       InsetBox["6", NCache[{Rational[-3, 2], Rational[1, 2]}, {-1.5, 0.5}]], 
       InsetBox["6", NCache[{Rational[1, 2], Rational[-5, 2]}, {0.5, -2.5}]], 
       InsetBox["6", NCache[{Rational[-5, 2], Rational[1, 2]}, {-2.5, 0.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[-3, 2]}, {2.5, -1.5}]], 
       InsetBox["3", NCache[{Rational[3, 2], Rational[-1, 2]}, {1.5, -0.5}]], 
       InsetBox["3", NCache[{Rational[3, 2], Rational[-7, 2]}, {1.5, -3.5}]], 
       InsetBox["8", 
        NCache[{Rational[-1, 2], Rational[-3, 2]}, {-0.5, -1.5}]], 
       InsetBox["7", 
        NCache[{Rational[-1, 2], Rational[-1, 2]}, {-0.5, -0.5}]], 
       InsetBox["3", NCache[{Rational[-3, 2], Rational[3, 2]}, {-1.5, 1.5}]], 
       InsetBox["5", NCache[{Rational[-1, 2], Rational[1, 2]}, {-0.5, 0.5}]], 
       InsetBox["3", NCache[{Rational[3, 2], Rational[-3, 2]}, {1.5, -1.5}]], 
       InsetBox["1", NCache[{Rational[-9, 2], Rational[5, 2]}, {-4.5, 2.5}]], 
       InsetBox["1", NCache[{Rational[5, 2], Rational[-1, 2]}, {2.5, -0.5}]], 
       InsetBox["2", NCache[{Rational[3, 2], Rational[1, 2]}, {1.5, 0.5}]], 
       InsetBox["1", NCache[{Rational[-5, 2], Rational[5, 2]}, {-2.5, 2.5}]]},
      
      Frame->True,
      GridLines->Automatic,
      PlotRange->{{-3, 3}, {-3, 3}},
      PlotRangeClipping->True], {967.5, -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}]}, {}},
  ContentSelectable->True,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.522985884568919*^9},
 CellTags->"Code",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQt0FcUZ3tybB+EmBCUBCuRxBIxQIUCrFUgADyo97cGCpyhSkhgDkvCs
POSlFTQ8xIImvAIUFM5RQI8inOLx1VNK5FFQmoSivCwgQksCJIQ8Ifdu7947
Se4mM7MzOzN39ybbU2IyO7vzzfz/zPzz/9/+OzpjbtbkGRlzszMzEkbNzvhj
VnbmnIQnZs12F9mDJCkoS5KklxMk5XfZ/Sv4Ibv/L2crP5QS/r9He/4TGuG6
XbgtL+N3C7OXr39zzdwJY+d8fFW6I8vh3suPVBxJK0mI6V3YLympMCkp6Z8P
PpweeawCXA6Jqi8vzNq3ccbNXvf0mjIjf19UYXm9FOa9Flv34+7tc9LmTn1z
/ertL6W9GP/+xVqpPea+9iRNIgHHCetPqM7+OJj6E8vUHxwuvf1hk49NpXaJ
NadX5I2dURBU5pK71/+0o3Bo0uzw4uqGh4TIdy7n7py5KPqL0nqlJMxZe91W
6wTdskfJ5QcujEgYEXWgXAbqFmaTnaV79o8ZMDT963LJJctumJP2DRy911bi
lCXYfQ58U+F4oHHc+xGqsx8RTP2IZeqHg2M/2OQB1MsHUNmIjt6l1Ob5aS+T
OnobUmoEe/U82lX617PDeo+NPFwhN9wj2SH1vY+3u5W7+NVtS/7c7fMrdQ1l
mm3Z0ErrkCu/OfVc3+SuH/zXqZR0dl7b833KA3+IOHYbJ2w1jg7eMt++SDEB
Mg6hOschknAcov04DnYDxoFUH8D06OztbJDsqkk9v2PMu4PS99tL68E0Dg53
VZ/ZviVtwkOrjt2SnDJutXWXHTw/queIjn8r83TK/fc/fhh530hPHbTAWjTh
gANKYMYZqhNnByqc8VQ4Maul4PEE4veuCiEd68u+yfhwW/7K1fMzU+fuOBNU
7WrUpN61Z1cUDkpa3O67GnjDzVeu3U2a+l1Kn4lITe2AfD4cTzwHrM1nFSnW
KEqscZRYMYogfFzVdlioXHf5+T1bD9qv18vKgnF6WOK4yCONxlwn5/Uv186d
/mHw1btyJ9f1/aeHJz4debTBvLR3lMv+DrPDPvr0qQHJ6QUN+37m3oFP7vPd
91X3OfBNheOBxnHvR6jOfkQw9SOWqR8Ojv1gk4davYLlu9dyPl08YXFWzrqc
3MXjl/7+TwW2MqePWXl15Sfzn12UtWxDTt7iZ2enri4Kuu0Cl4Pdp5BvF7+f
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
ug0UV3Ue02XQhkcy2eJ+l4L+D02/+5o=\
\>"]]
}, Open  ]],

Cell[TextData[StyleBox["Our code is generic, it works for finite-dimensional \
and affine Lie algebras. But we need additional routine \nto plot weight \
multiplicities in affine case.", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"affinePlot", "[", 
   RowBox[{"f_formalElement", ",", 
    RowBox[{"opts___", "?", "OptionQ"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Graphics", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"f", "[", "#", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"grade", "[", "#", "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", "finitePart", "]"}], "[", "standardBase", 
             "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}], "&"}], ")"}], "/@", 
     RowBox[{"f", "[", "weights", "]"}]}], ",", "opts"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5220401871914377`*^9, 3.522040239232897*^9}, {
  3.522040297469646*^9, 3.522040419916359*^9}, {3.5220405431903954`*^9, 
  3.5220405760013866`*^9}, {3.522040627910157*^9, 3.52204063169974*^9}, {
  3.522143524585524*^9, 3.52214353164401*^9}, {3.522204340498188*^9, 
  3.522204363533033*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[TextData[StyleBox["Now we can plot the character of affine Lie algebra \
A1.", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144477334271*^9, 3.522144494973666*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"affinePlot", "[", 
  RowBox[{
   RowBox[{"character", "[", 
    RowBox[{
     RowBox[{"makeIrreducibleModule", "[", 
      OverscriptBox[
       SubscriptBox["A", "1"], "^"], "]"}], "[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"Axes", "\[Rule]", "True"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5220404283337917`*^9, 3.522040478106638*^9}, {
  3.5220406526722717`*^9, 3.522040675801445*^9}, {3.522041356613391*^9, 
  3.5220414285556173`*^9}, {3.522144506985178*^9, 3.522144539698722*^9}, {
  3.522204371094652*^9, 3.5222043789782877`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 GraphicsBox[{InsetBox["10", {-4, -2}], InsetBox["129", {-10, 3}], 
   InsetBox["1", {-1, 2}], InsetBox["44", {-5, 0}], InsetBox["210", {-8, 0}], 
   InsetBox["5", {-3, 2}], InsetBox["129", {-7, 0}], InsetBox["1", {-8, 5}], 
   InsetBox["64", {-7, 2}], InsetBox["44", {-8, 3}], InsetBox["24", {-7, -3}],
    InsetBox["13", {-6, 3}], InsetBox["20", {-5, -2}], 
   InsetBox["24", {-7, 3}], InsetBox["64", {-6, 1}], InsetBox["6", {-2, 0}], 
   InsetBox["36", {-10, -4}], InsetBox["108", {-8, -2}], 
   InsetBox["6", {-5, 3}], InsetBox["10", {-4, 2}], InsetBox["5", {-10, 5}], 
   InsetBox["1", {0, 1}], InsetBox["129", {-10, -3}], InsetBox["1", {-3, -3}],
    InsetBox["1", {-3, 3}], InsetBox["3", {-4, -3}], InsetBox["1", {-5, -4}], 
   InsetBox["108", {-7, -1}], InsetBox["20", {-9, -4}], 
   InsetBox["10", {-8, 4}], InsetBox["2", {-9, -5}], InsetBox["1", {0, -1}], 
   InsetBox["180", {-9, -2}], InsetBox["289", {-9, 1}], 
   InsetBox["180", {-8, 1}], InsetBox["13", {-3, 0}], InsetBox["2", {-1, 1}], 
   InsetBox["24", {-4, 0}], InsetBox["36", {-5, -1}], 
   InsetBox["289", {-9, -1}], InsetBox["2", {-1, -1}], 
   InsetBox["20", {-9, 4}], InsetBox["1", {-8, -5}], InsetBox["1", {0, 0}], 
   InsetBox["6", {-5, -3}], InsetBox["289", {-10, -2}], 
   InsetBox["36", {-10, 4}], InsetBox["531", {-10, 0}], 
   InsetBox["3", {-1, 0}], InsetBox["36", {-6, 2}], InsetBox["5", {-2, 1}], 
   InsetBox["5", {-2, -1}], InsetBox["76", {-9, 3}], InsetBox["2", {-2, 2}], 
   InsetBox["2", {-9, 5}], InsetBox["20", {-5, 2}], InsetBox["108", {-7, 1}], 
   InsetBox["459", {-10, 1}], InsetBox["64", {-6, -1}], 
   InsetBox["10", {-8, -4}], InsetBox["64", {-7, -2}], 
   InsetBox["108", {-8, 2}], InsetBox["5", {-3, -2}], InsetBox["76", {-6, 0}],
    InsetBox["2", {-6, 4}], InsetBox["2", {-6, -4}], InsetBox["1", {-1, -2}], 
   InsetBox["339", {-9, 0}], InsetBox["459", {-10, -1}], 
   InsetBox["10", {-3, 1}], InsetBox["10", {-3, -1}], InsetBox["2", {-2, -2}],
    InsetBox["1", {-5, 4}], InsetBox["3", {-4, 3}], InsetBox["180", {-8, -1}],
    InsetBox["180", {-9, 2}], InsetBox["13", {-6, -3}], 
   InsetBox["36", {-5, 1}], InsetBox["289", {-10, 2}], InsetBox["5", {-7, 4}],
    InsetBox["76", {-9, -3}], InsetBox["20", {-4, -1}], 
   InsetBox["44", {-8, -3}], InsetBox["5", {-7, -4}], InsetBox["20", {-4, 1}],
    InsetBox["36", {-6, -2}], InsetBox["5", {-10, -5}]},
  Axes->True]], "Output",
 CellChangeTimes->{3.522985888786304*^9},
 CellTags->"Code",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
d1eV+nrGCQH/B9XUfvo=\
\>"]]
}, Open  ]],

Cell[TextData[{
 StyleBox["We see that result coicides with the tables in book of Moody, \
Patera et. al. \nAlso it is easy to notice Weyl symmetry of irreducible \
module. So it is enough to calculate multiplicities\nin main Weyl chamber \
only. \nThis multiplicities are conveniently encoded as string functions. \
Affine.m has special function \n", "Text"],
 StyleBox["stringFunctions", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[" which calculates all string functions of module. So for A1 we can \
use it.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"stringFunctions", "[", 
  RowBox[{
   OverscriptBox[
    SubscriptBox["A", "1"], "^"], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522144751678562*^9, 3.5221447960209637`*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "0"}], "}"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"3", " ", "q"}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"13", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"24", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"44", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"76", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"129", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"210", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"339", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"531", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "q"}], "+", 
      RowBox[{"5", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"10", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"20", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"36", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"64", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"108", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"180", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"289", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"459", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.522985891574747*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[StyleBox["We can get less trivial results too:", "Text"]], \
"Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"stringFunctions", "[", 
  RowBox[{
   OverscriptBox[
    SubscriptBox["B", "3"], "^"], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5221448490835333`*^9, 3.522144892392564*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "2"}], "}"}], ",", 
     RowBox[{
      RowBox[{"3", " ", "q"}], "+", 
      RowBox[{"18", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"88", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"336", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"1149", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"3530", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"10092", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"27048", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"68919", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"167880", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"8", " ", "q"}], "+", 
      RowBox[{"42", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"176", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"633", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"2038", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"6027", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"16646", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"43450", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"108134", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"258299", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"9", " ", "q"}], "+", 
      RowBox[{"51", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"218", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"789", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"2541", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"7493", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"20601", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"53499", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"132427", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"314634", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{
      RowBox[{"3", " ", "q"}], "+", 
      RowBox[{"22", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"107", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"420", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"1431", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"4401", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"12514", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"33403", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"84617", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"205068", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "2", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"q", "+", 
      RowBox[{"9", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"51", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"218", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"789", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"2541", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"7493", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"20601", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"53499", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"132427", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.522988367511602*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Branching", "Title"],
 "\n",
 StyleBox["Now we can consider the problem of decomposition of irreducible \
modules of Lie algebra into the sum\nof irreducible modules of subalgebra.\n\
One way to specify the subalgebra is to list its simple roots in the root \
space of algebra. E.g.", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
   3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
   3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
   3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
   3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
   3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
   3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
   3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
   3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
   3.522144824138832*^9, 3.522144834593553*^9}, {3.522150832004524*^9, 
   3.522150842588929*^9}, 3.5229856197727327`*^9},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sub", "=", 
  RowBox[{"makeFiniteRootSystem", "[", 
   RowBox[{"{", 
    RowBox[{"Plus", " ", "@@", " ", 
     RowBox[{
      SubscriptBox["B", "2"], "[", "simpleRoots", "]"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5221509607668962`*^9, 3.522151011422659*^9}, {
  3.522203599321496*^9, 3.522203607862665*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"finiteRootSystem", "[", 
  RowBox[{"1", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"finiteWeight", "[", 
     RowBox[{"2", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}]}], "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.5229883677082376`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[{
 StyleBox["To calculate branching of irreducible module to irreducible \
modules of subalgebra use function ", "Text"],
 StyleBox["branching", "Code",
  FontVariations->{"Underline"->True}]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203307967121*^9, 3.5222033477904673`*^9}, {
  3.522204032570232*^9, 3.522204038036234*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"brc", "=", 
  RowBox[{"branching", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"makeIrreducibleModule", "[", 
      SubscriptBox["B", "2"], "]"}], "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "sub"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5222032582888813`*^9, 3.5222032747810926`*^9}, {
  3.522203354657351*^9, 3.522203395718841*^9}, {3.522203614500144*^9, 
  3.522203614937779*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"formalElement", "[", "Affine`Private`table$5742", "]"}]], "Output",
 CellChangeTimes->{3.522988368042172*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[StyleBox["In this simple case of embedding A1->B2 we can \
compare the results by hand. First look at the weight diagram \nthe module:", \
"Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"textPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"makeIrreducibleModule", "[", 
     SubscriptBox["B", "2"], "]"}], "[", 
    RowBox[{"1", ",", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"Axes", "\[Rule]", "True"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522203486081004*^9, 3.522203523470376*^9}, {
  3.522203628310478*^9, 3.522203640042638*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 GraphicsBox[{
   InsetBox["1", NCache[{Rational[3, 2], Rational[1, 2]}, {1.5, 0.5}]], 
   InsetBox["1", NCache[{Rational[1, 2], Rational[3, 2]}, {0.5, 1.5}]], 
   InsetBox["1", NCache[{Rational[3, 2], Rational[-1, 2]}, {1.5, -0.5}]], 
   InsetBox["1", NCache[{Rational[-1, 2], Rational[3, 2]}, {-0.5, 1.5}]], 
   InsetBox["1", NCache[{Rational[1, 2], Rational[-3, 2]}, {0.5, -1.5}]], 
   InsetBox["1", NCache[{Rational[-3, 2], Rational[1, 2]}, {-1.5, 0.5}]], 
   InsetBox["1", NCache[{Rational[-1, 2], Rational[-3, 2]}, {-0.5, -1.5}]], 
   InsetBox["1", NCache[{Rational[-3, 2], Rational[-1, 2]}, {-1.5, -0.5}]], 
   InsetBox["2", NCache[{Rational[1, 2], Rational[1, 2]}, {0.5, 0.5}]], 
   InsetBox["2", NCache[{Rational[1, 2], Rational[-1, 2]}, {0.5, -0.5}]], 
   InsetBox["2", NCache[{Rational[-1, 2], Rational[1, 2]}, {-0.5, 0.5}]], 
   InsetBox["2", NCache[{Rational[-1, 2], Rational[-1, 2]}, {-0.5, -0.5}]]},
  Axes->True]], "Output",
 CellChangeTimes->{3.522988368373242*^9},
 CellTags->"Code",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwZgBxkgIDiP2fgQFG
bGP4//8/AzMDmANkgfB6MMlAdalqMMXK/+fDhYxN03PfqQiqpOfO2MR/4cMf
BhWwHD9WOaAMz//Pp48lWqZxn/nyT+Pr9embkn1TM5unzZjQkZ9s33bgLcMf
sKWYVhvjsbMc4qwaiDb+/x8O3HdQcOA/8OE/gxoWMSawGCfT/7+frG4cvcn0
+e8fl9e7m2xaDr9j+Pv/v9zvhzPPWRpWc1z7jt0pJljMrMDtBBmE2HsHAUh0
MYFJ5vcMAhA1IBVMWPRyQMRE/73adNtWJYDv2EeqOAlbqLCCxdgE/r0/Fde/
8BjPs89v8s9McF6rEbSW+cWf/2BbWUF2GlHLLlah/28P52ROXp+6alZ/3KSF
ezjvf/vHwEKW9wT+v9+PbiWKGMRKZt7/n0435ddeYPgC8ixuq1D0ViAnexZg
Ejxbvawl7oaBugf/oQ//VbELQ8OT6//X81eztdQu6OjrX9DXN2p1rbrM8PX/
f9xpHMOkChplY7pLgWUGobsGv9RoyI0Gz2jwMCwBU3xENC7+y/58tHJhcVxJ
VvfU3oVlcYXyyx78wFa1QE1eCpHC105g+fz79fqtAQbW8Uc+MPz7/9/i0/GU
TYa+G5le/cVeKUONno0wmuT6H+Jidu7/X85cTdCykVj1/C9IROzvy/XXbTWi
eU59xms1Nl9BjQSKHbrjruwgsPc9WAuQf/Cus5IzWA15RsJduRLhymu2mjEI
V4LbD2tRDEKpaKEGAUP89dptQQY28YdhIZ280dBvE6GQhiQPHDUxq8zPx6sX
lMaDU8SCsvhiuRUPf2JtbQyuND9aJIwGzxCSGg25kRE8XGAKe388ByzHBiy2
414piKpe0AV3ffRP6pjF85769F8ZLM2PrYYGyVA4RIDT2mw8Lob0BBm4Iaai
VG65EFNZ//96PHF5XpXIrtfgtgb73x9vmH78/a8ElhYAVVm4GgfEDDTg8Q8u
m3OwOJYdtz/yIGI8/z5fqp/X0CO18+lPPEMTXMhNE3zND2gfmtgRChTr80jz
QT5YjIXz37ebC2fHRZl2nfoICkZIDBDToCFicMMYux0khnUBREz1x632C0b6
kJEkqDMJN5JIGBcxw2IPYaeiNLmgyVv475vdk0tyVrM8+/1f+N+brTfs1cN4
T3yCBS4xLTKCQyvG+K3KweI6duTCBqNhh8iazzo2lEdWZbROa5lUHVkU23uR
8fM/aDmDr91HxugMTtuysbuRfVCV2qM112jIDTapER48nGCKsgkTLbAZZI+L
QLRT1iDTxeJDPSqYSx2vURS6jJCIglRC5E8laRPWj3eISQOsluKWpi48z+lS
x0BK/aVFYbhCo4eKM2yKCHU0GbFTwGk+Rc1ubFlQlwjnYDMLW6QS4zVskYkt
iPHkKQITkXhchrcLoEGEGgLdBDwBTImx5PoIW1gTCDyCwY6976FDRGrA1p/R
IEINvj6PHhEpmlQzyfUL7tDGbg8TSlATnIvWw6KOmOFwDSLUYOugGeAOWpLN
ItftWkSGDQtyS4nUiXYtfLqwdw618MgR6DjibgaRZRzZjic1lBgJtlMHiRTY
H+C6MhlEQN3Ng0UDBxYxTiLVUVvvYHLLqD8oM49tNMmN+mPQJDkzLGKmdFA3
eJ00SCqq0WGv0eAZDbnBJzVsgmd0Bn4YzMBDtkuQPj43OsUOERudYseWYEen
2AdliT1iqqbRkBtcUqPBMzKCZ0jujyBmR8Hovgd8bhvd9zDysvpo8AwuqdGQ
GxnBM3r2AYaZJG7+Hz3TgEjvjZ5pQFUpBkYAFUPsHA==\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"drawPlaneProjection", "[", 
  RowBox[{"1", ",", "2", ",", "brc", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Frame", "->", "True"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.5"}], ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "0.5"}], ",", "0.5"}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"PlotRangeClipping", "\[Rule]", "True"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5222035393620358`*^9, 3.522203579917947*^9}, {
  3.5222036541450253`*^9, 3.522203659054282*^9}, {3.5222036995067997`*^9, 
  3.522203790933279*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 GraphicsBox[{InsetBox["2", NCache[{Rational[3, 2], 0}, {1.5, 0}]], 
   InsetBox["4", NCache[{Rational[1, 2], 0}, {0.5, 0}]]},
  Frame->True,
  PlotRange->{{-0.5, 2}, {-0.5, 0.5}},
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.522988368586481*^9},
 CellTags->"Code",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwZjAwMExUYACx/wOZ
UOI/EP3PBBEgEQRbEkzxy/58tHJhcVxJVvfU3oVlcYXyyx78AMnw/P98+lii
ZRr3mS//NL5en74p2Tc1s3najAkd+cn2bQfeMvwB6tYDm8FHhBn/sakxpoIT
DCFO4P/z4ULGpum571QEVdJzZ2ziv/DhDwlOIEI7QSdYfDoe90pBVPWCrr7+
BX19/ZM6ZvG8pz4RdAITJD4kwJQA0/+/r9dvDTCwjj/ygeHf//9AU1M2Gfpu
ZHr19z9Q7pPVjaM3mT7//ePyeneTTcvhdwx///+X+/1w5jlLw2qOa9//6xJv
DMvn3zjVGFLHNUZgY5j5/384cN9BwYH/wIf/DBD/chLjCgZjwvrxWQ+NGn7W
/78eT1yeVyWy6zU4Wtn//njD9IO4kGBghMSPAMIp7x0EIJmLCUxyvWcQgDgN
qIL7/5czVxO0bCRWPf8L4ov9fbn+uq1GNM+pz//ZIEaI/nu16batSgDfsY//
GSDxxY5PG9TH+NUYEqEGm/3YYoiFCLOwxQwHbvN5/n2+VD+voUdq59OfRJnP
iJwr2IHWHLrjruwgsPc9OJSB/IN3nZWcwdYyg9WwCfx7fyquf+Exnmef3+Sf
meC8ViNoLfOLP9Acgd8IJiLUGFLuFDyBjddYbIHNit8qiBYWzn/fbi6cHRdl
2nXqIyh3EONR1KCHx9JKRCxds9WMAccSxL+sQv/fHs7JnLw+ddWs/rhJC/dw
3v/2D1o54NePnrKxqUFP2aS6A1vgoadAbGbiDnTs9phC1Kv+uNV+wUgfUv4Q
4z/U4AaVuGu3BRnYxB+GFUXJGw39NoGLIog3mXn/fzrdlF97geELkGdAhD4m
ItQYkmk/1NsC/9/vRw9evGYZY9HHisV8E0g6F/77ZvfkkpzVLM9+/xf+92br
DXv1MN4Tn/4T4zVG5BYPq8zPx6sXlMaD6+AFZfHFcisewookNq7/X89fzdZS
u6ADrsONWl2rLjN8/f9fj6BW7HLG5FsJiQ8WYMvkbPWylrgbBuoe/Ic+/Gcl
aBsOLQQsYgPWkc86NpRHVmW0TmuZVB1ZFNt7kfHzv//MeCxkwmxWUsKWAVHg
KtUVRHAgiQKTHqQ1C1bPwDVAYpyDyC0jzb9so8lhoMUGk3/xJAc7LGK2VFaH
x3ow6UgDPWAZsLA9nIunkKSFOyApgJguO1gb+/8fTzN2TM9+pyyoElW49Abj
l3+w1gFp9kK8yUVkfxTaKsDWdiPNWsr6e1BXAAPh5pUWbc7/jHAjmD8x8JpK
L3ryB2o1uQFCTK8GpOGv4cdz85VX3vmGHCLkBAjUWmIa48D4+Jh4bt4yqZtP
0Vp4LPB0bAvncqCYj7c5B0k/LLz/Pl3Imz9x0gNjebK9A0nO2Bs3EPNAlv3T
/3Kh6bGhjCO51tC1lBiiJcuw1DMarkMijCDtC6JqNVyjvGQV4pDih9hR1v+4
hjHJsRriXljtxsBMWs0GrcJRRvXIL3/x12LQchh9JAvsfjw1CdRovDUVdEAU
ZciG/HgkZuwE5zgGOdZCki3e0QX8vfpBXCoM0ZJk0OsZDaNhG66Q4oDs2Vhs
3bJaMMmKtRtXDbEbV4WIrSNNerWHb2YOWxlWBxFD6fjVQOzGVXsSdCjlk3PY
XAoJPsKdQ6g6lKrWnqCTKZ7tQlSvVXDjsfYiISGOUT1bwfWTUB8TM12CLSwh
MYy9x1kPUY9SxxOOcoqnU7A5E5KbMDqu0PSJq2WAx7GEGwD45LA6jgGtu4vI
PFjbEXgcN1pkDwM9o2E0bMN1BHZ6ianPR7u2JNeHo13bkVBeDHo9o2E0JMJ1
hE0hos+Y4e5Djk4Ujk4UDnY9w6iMHeBVIqNreEaef0eTw4CLDSb/IicHcG2P
vOyVgREAYtcGBQ==\
\>"]]
}, Open  ]],

Cell[TextData[StyleBox["The same function can be used for affine Lie \
algebras:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.522203868416325*^9, 
  3.52220388382092*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"suba", "=", 
   RowBox[{"makeAffineExtension", "[", "sub", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"brc", "=", 
  RowBox[{"branching", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"makeIrreducibleModule", "[", 
      OverscriptBox[
       SubscriptBox["B", "2"], "^"], "]"}], "[", 
     RowBox[{"1", ",", "1", ",", "1"}], "]"}], ",", "suba"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.5222038877449703`*^9, 3.522203925427321*^9}, {
  3.522204060405725*^9, 3.522204085000699*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 RowBox[{"formalElement", "[", "Affine`Private`table$11496", "]"}]], "Output",\

 CellChangeTimes->{3.5229885377876043`*^9},
 CellTags->"Code"]
}, Open  ]],

Cell[TextData[StyleBox["Now we can see branching coefficients in main Weyl \
chamber:", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.522204481781803*^9, 
  3.522204498797613*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"affinePlot", "[", 
  RowBox[{"brc", ",", 
   RowBox[{"{", 
    RowBox[{"Frame", "\[Rule]", "True"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522204400289916*^9, 3.522204428605804*^9}},
 Background->RGBColor[1, 0.85, 0.85],
 CellTags->"Code"],

Cell[BoxData[
 GraphicsBox[{InsetBox["3540", NCache[{-8, Rational[1, 2]}, {-8, 0.5}]], 
   InsetBox["112", NCache[{-4, Rational[5, 2]}, {-4, 2.5}]], 
   InsetBox["5620", NCache[{-9, Rational[3, 2]}, {-9, 1.5}]], 
   InsetBox["132", NCache[{-3, Rational[3, 2]}, {-3, 1.5}]], 
   InsetBox["8024", NCache[{-11, Rational[5, 2]}, {-11, 2.5}]], 
   InsetBox["4", NCache[{-1, Rational[5, 2]}, {-1, 2.5}]], 
   InsetBox["132", NCache[{-3, Rational[1, 2]}, {-3, 0.5}]], 
   InsetBox["2236", NCache[{-7, Rational[1, 2]}, {-7, 0.5}]], 
   InsetBox["4", NCache[{0, Rational[1, 2]}, {0, 0.5}]], 
   InsetBox["420", NCache[{-6, Rational[5, 2]}, {-6, 2.5}]], 
   InsetBox["52", NCache[{-2, Rational[1, 2]}, {-2, 0.5}]], 
   InsetBox["292", NCache[{-4, Rational[3, 2]}, {-4, 1.5}]], 
   InsetBox["586", NCache[{-5, Rational[3, 2]}, {-5, 1.5}]], 
   InsetBox["2312", NCache[{-7, Rational[3, 2]}, {-7, 1.5}]], 
   InsetBox["216", NCache[{-5, Rational[5, 2]}, {-5, 2.5}]], 
   InsetBox["5944", NCache[{-9, Rational[1, 2]}, {-9, 0.5}]], 
   InsetBox["22736", NCache[{-11, Rational[3, 2]}, {-11, 1.5}]], 
   InsetBox["3272", NCache[{-10, Rational[5, 2]}, {-10, 2.5}]], 
   InsetBox["1492", NCache[{-8, Rational[5, 2]}, {-8, 2.5}]], 
   InsetBox["284", NCache[{-4, Rational[1, 2]}, {-4, 0.5}]], 
   InsetBox["2", NCache[{0, Rational[3, 2]}, {0, 1.5}]], 
   InsetBox["16", NCache[{-1, Rational[1, 2]}, {-1, 0.5}]], 
   InsetBox["21496", NCache[{-11, Rational[1, 2]}, {-11, 0.5}]], 
   InsetBox["16", NCache[{-2, Rational[5, 2]}, {-2, 2.5}]], 
   InsetBox["596", NCache[{-5, Rational[1, 2]}, {-5, 0.5}]], 
   InsetBox["14", NCache[{-1, Rational[3, 2]}, {-1, 1.5}]], 
   InsetBox["2080", NCache[{-9, Rational[5, 2]}, {-9, 2.5}]], 
   InsetBox["1182", NCache[{-6, Rational[3, 2]}, {-6, 1.5}]], 
   InsetBox["12176", NCache[{-10, Rational[1, 2]}, {-10, 0.5}]], 
   InsetBox["3834", NCache[{-8, Rational[3, 2]}, {-8, 1.5}]], 
   InsetBox["48", NCache[{-3, Rational[5, 2]}, {-3, 2.5}]], 
   InsetBox["1224", NCache[{-6, Rational[1, 2]}, {-6, 0.5}]], 
   InsetBox["50", NCache[{-2, Rational[3, 2]}, {-2, 1.5}]], 
   InsetBox["848", NCache[{-7, Rational[5, 2]}, {-7, 2.5}]], 
   InsetBox["10368", NCache[{-10, Rational[3, 2]}, {-10, 1.5}]]},
  Frame->True]], "Output",
 CellChangeTimes->{3.522988538721266*^9},
 CellTags->"Code",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
z0X8G/fIJO4=\
\>"]]
}, Open  ]],

Cell[TextData[{
 StyleBox["To get this result as the set of branching functions we can use \
function ", "Text"],
 StyleBox["branchingFunctions", "Code",
  FontVariations->{"Underline"->True}],
 StyleBox[", which has \nfollowing parameters: root system of algebra, root \
system of subalgebra and Dynkin labels of highest weight \nof algebra module. \
For example to get the above result use this code:", "Text"]
}], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.5222045202382708`*^9, 
  3.5222046720800037`*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"branchingFunctions", "[", 
  RowBox[{
   OverscriptBox[
    SubscriptBox["B", "2"], "^"], ",", "suba", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.522204673737878*^9, 3.522204690420073*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "1"}], "}"}], ",", 
     RowBox[{"4", "+", 
      RowBox[{"16", " ", "q"}], "+", 
      RowBox[{"52", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"132", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"284", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"596", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"1224", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"2236", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"3540", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"5944", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"12176", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "3"}], "}"}], ",", 
     RowBox[{"2", "+", 
      RowBox[{"14", " ", "q"}], "+", 
      RowBox[{"50", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"132", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"292", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"586", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"1182", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"2312", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"3834", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"5620", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"10368", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}], ",", 
     RowBox[{
      RowBox[{"4", " ", "q"}], "+", 
      RowBox[{"16", " ", 
       SuperscriptBox["q", "2"]}], "+", 
      RowBox[{"48", " ", 
       SuperscriptBox["q", "3"]}], "+", 
      RowBox[{"112", " ", 
       SuperscriptBox["q", "4"]}], "+", 
      RowBox[{"216", " ", 
       SuperscriptBox["q", "5"]}], "+", 
      RowBox[{"420", " ", 
       SuperscriptBox["q", "6"]}], "+", 
      RowBox[{"848", " ", 
       SuperscriptBox["q", "7"]}], "+", 
      RowBox[{"1492", " ", 
       SuperscriptBox["q", "8"]}], "+", 
      RowBox[{"2080", " ", 
       SuperscriptBox["q", "9"]}], "+", 
      RowBox[{"3272", " ", 
       SuperscriptBox["q", "10"]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5229887268063183`*^9}]
}, Open  ]],

Cell[TextData[StyleBox["We can see that level of modules of subalgebra are \
not equal to the level of module of Lie algebra since \nwe have built the \
root system of A1-subalgebra on the short root of B2.", "Text"]], "Input",
 Editable->False,
 PageWidth->WindowWidth,
 Evaluatable->False,
 CellChangeTimes->{{3.521873602978365*^9, 3.521873636671371*^9}, {
  3.521873668544697*^9, 3.5218736720921373`*^9}, {3.521874081215743*^9, 
  3.5218741184887323`*^9}, {3.52187421590868*^9, 3.52187423431264*^9}, {
  3.521952593115614*^9, 3.521952608518387*^9}, {3.5219526928991117`*^9, 
  3.521952755961626*^9}, {3.521952904003066*^9, 3.521952923234408*^9}, {
  3.521952990881136*^9, 3.521953086864806*^9}, {3.521953139066078*^9, 
  3.5219531747567797`*^9}, {3.5219538618052797`*^9, 3.521953920248773*^9}, {
  3.521954092544243*^9, 3.5219542436762543`*^9}, {3.5220401355026617`*^9, 
  3.522040180453158*^9}, {3.522144553781418*^9, 3.522144759579866*^9}, {
  3.522144824138832*^9, 3.522144834593553*^9}, {3.522150856656583*^9, 
  3.522150954412807*^9}, {3.522203425915024*^9, 3.522203469683432*^9}, {
  3.52220362163011*^9, 3.522203622030675*^9}, {3.522204868119225*^9, 
  3.522204959674514*^9}},
 Background->RGBColor[0.87, 0.94, 1],
 CellTags->"Text"]
},
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
ShowSelection->True,
ShowCellTags->True,
FrontEndVersion->"8.0 for Linux x86 (64-bit) (November 7, 2010)",
StyleDefinitions->FrontEnd`FileName[{"Article"}, "Preprint.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Text"->{
  Cell[557, 20, 637, 16, 105, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[1801, 55, 344, 8, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[2703, 85, 875, 21, 127, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[4066, 125, 674, 15, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[5427, 166, 275, 8, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[6333, 202, 301, 7, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[7260, 235, 754, 19, 105, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[9008, 291, 258, 7, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[10295, 336, 353, 10, 75, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[12288, 402, 297, 9, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[13535, 446, 224, 6, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[14659, 486, 284, 8, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[18464, 613, 351, 10, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[21417, 711, 575, 14, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[24488, 812, 332, 9, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[25368, 845, 629, 14, 105, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[26329, 872, 305, 7, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[27230, 905, 600, 14, 91, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[29774, 990, 474, 12, 75, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[31575, 1054, 1040, 26, 109, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[34177, 1144, 1307, 28, 131, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[38332, 1281, 1043, 22, 163, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[40810, 1350, 817, 14, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[43188, 1405, 975, 22, 127, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[57971, 1676, 934, 16, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[60021, 1724, 877, 15, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[69939, 1899, 1323, 24, 131, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[73276, 1993, 907, 16, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[78653, 2150, 1239, 23, 141, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[80653, 2202, 1188, 22, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[82507, 2248, 1138, 19, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[90210, 2407, 1116, 19, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[92114, 2456, 1122, 19, 59, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[102570, 2641, 1445, 26, 95, "Input",
   Evaluatable->False,
   CellTags->"Text"],
  Cell[106772, 2758, 1243, 20, 77, "Input",
   Evaluatable->False,
   CellTags->"Text"]},
 "Code"->{
  Cell[1197, 38, 601, 15, 81, "Input",
   InitializationCell->True,
   CellTags->"Code"],
  Cell[2170, 67, 401, 11, 81, "Input",
   CellTags->"Code"],
  Cell[2574, 80, 114, 2, 36, "Print",
   CellTags->"Code"],
  Cell[3581, 108, 268, 7, 58, "Text",
   Evaluatable->True,
   CellTags->"Code"],
  Cell[3852, 117, 211, 6, 43, "Output",
   CellTags->"Code"],
  Cell[4743, 142, 388, 11, 58, "Text",
   Evaluatable->True,
   CellTags->"Code"],
  Cell[5134, 155, 290, 9, 43, "Output",
   CellTags->"Code"],
  Cell[5727, 178, 184, 4, 59, "Input",
   CellTags->"Code"],
  Cell[5914, 184, 89, 2, 43, "Output",
   CellTags->"Code"],
  Cell[6040, 191, 186, 4, 59, "Input",
   CellTags->"Code"],
  Cell[6229, 197, 89, 2, 43, "Output",
   CellTags->"Code"],
  Cell[6659, 213, 384, 11, 59, "Input",
   CellTags->"Code"],
  Cell[7046, 226, 199, 6, 43, "Output",
   CellTags->"Code"],
  Cell[8039, 258, 461, 13, 59, "Input",
   CellTags->"Code"],
  Cell[8503, 273, 490, 15, 43, "Output",
   CellTags->"Code"],
  Cell[9291, 302, 496, 14, 59, "Input",
   CellTags->"Code"],
  Cell[9790, 318, 490, 15, 43, "Output",
   CellTags->"Code"],
  Cell[10673, 350, 196, 4, 59, "Input",
   CellTags->"Code"],
  Cell[10872, 356, 1401, 43, 82, "Output",
   CellTags->"Code"],
  Cell[12610, 415, 221, 5, 59, "Input",
   CellTags->"Code"],
  Cell[12834, 422, 686, 21, 43, "Output",
   CellTags->"Code"],
  Cell[13784, 456, 171, 4, 59, "Input",
   CellTags->"Code"],
  Cell[13958, 462, 686, 21, 43, "Output",
   CellTags->"Code"],
  Cell[14968, 498, 204, 5, 59, "Input",
   CellTags->"Code"],
  Cell[15175, 505, 89, 2, 43, "Output",
   CellTags->"Code"],
  Cell[15301, 512, 202, 5, 59, "Input",
   CellTags->"Code"],
  Cell[15506, 519, 2943, 91, 120, "Output",
   CellTags->"Code"],
  Cell[18840, 627, 227, 6, 59, "Input",
   CellTags->"Code"],
  Cell[19070, 635, 1117, 32, 63, "Output",
   CellTags->"Code"],
  Cell[20224, 672, 272, 7, 59, "Input",
   CellTags->"Code"],
  Cell[20499, 681, 903, 27, 63, "Output",
   CellTags->"Code"],
  Cell[22017, 729, 415, 12, 59, "Input",
   CellTags->"Code"],
  Cell[22435, 743, 1012, 31, 127, "Output",
   CellTags->"Code"],
  Cell[23484, 779, 294, 7, 59, "Input",
   CellTags->"Code"],
  Cell[23781, 788, 692, 21, 67, "Output",
   CellTags->"Code"],
  Cell[24845, 825, 258, 7, 59, "Input",
   CellTags->"Code"],
  Cell[25106, 834, 247, 8, 60, "Output",
   CellTags->"Code"],
  Cell[26000, 861, 326, 9, 59, "Input",
   CellTags->"Code"],
  Cell[26659, 883, 282, 8, 59, "Input",
   CellTags->"Code"],
  Cell[26944, 893, 271, 9, 60, "Output",
   CellTags->"Code"],
  Cell[27855, 923, 344, 10, 59, "Input",
   CellTags->"Code"],
  Cell[28202, 935, 1557, 52, 82, "Output",
   CellTags->"Code"],
  Cell[30273, 1006, 528, 15, 59, "Input",
   CellTags->"Code"],
  Cell[30804, 1023, 756, 28, 43, "Output",
   CellTags->"Code"],
  Cell[32640, 1084, 362, 10, 59, "Input",
   CellTags->"Code"],
  Cell[33005, 1096, 115, 2, 43, "Output",
   CellTags->"Code"],
  Cell[33157, 1103, 178, 4, 59, "Input",
   CellTags->"Code"],
  Cell[33338, 1109, 89, 2, 43, "Output",
   CellTags->"Code"],
  Cell[33464, 1116, 180, 4, 59, "Input",
   CellTags->"Code"],
  Cell[33647, 1122, 146, 4, 43, "Output",
   CellTags->"Code"],
  Cell[33830, 1131, 183, 4, 59, "Input",
   CellTags->"Code"],
  Cell[34016, 1137, 146, 4, 43, "Output",
   CellTags->"Code"],
  Cell[35509, 1176, 643, 19, 59, "Input",
   CellTags->"Code"],
  Cell[36155, 1197, 154, 3, 46, "Output",
   CellTags->"Code"],
  Cell[36346, 1205, 283, 7, 59, "Input",
   CellTags->"Code"],
  Cell[36632, 1214, 421, 14, 60, "Output",
   CellTags->"Code"],
  Cell[37090, 1233, 240, 6, 59, "Input",
   CellTags->"Code"],
  Cell[37333, 1241, 134, 4, 43, "Output",
   CellTags->"Code"],
  Cell[37504, 1250, 388, 12, 59, "Input",
   CellTags->"Code"],
  Cell[37895, 1264, 422, 14, 60, "Output",
   CellTags->"Code"],
  Cell[39400, 1307, 698, 19, 59, "Input",
   CellTags->"Code"],
  Cell[40101, 1328, 694, 19, 68, "Output",
   CellTags->"Code"],
  Cell[41630, 1366, 1555, 37, 117, "Input",
   CellTags->"Code"],
  Cell[44166, 1429, 864, 23, 79, "Input",
   CellTags->"Code"],
  Cell[45055, 1456, 344, 10, 59, "Input",
   CellTags->"Code"],
  Cell[45402, 1468, 12554, 205, 152, 6973, 111, "CachedBoxData", 
  "BoxData", "Output",
   CellTags->"Code"],
  Cell[58908, 1694, 1110, 28, 79, "Input",
   CellTags->"Code"],
  Cell[60923, 1743, 669, 16, 62, "Input",
   CellTags->"Code"],
  Cell[61595, 1761, 8329, 135, 384, 2394, 35, "CachedBoxData", 
  "BoxData", "Output",
   CellTags->"Code"],
  Cell[71287, 1927, 313, 9, 62, "Input",
   CellTags->"Code"],
  Cell[71603, 1938, 1658, 52, 68, "Output",
   CellTags->"Code"],
  Cell[74208, 2013, 333, 9, 62, "Input",
   CellTags->"Code"],
  Cell[74544, 2024, 4094, 123, 134, "Output",
   CellTags->"Code"],
  Cell[79917, 2177, 406, 11, 59, "Input",
   CellTags->"Code"],
  Cell[80326, 2190, 312, 9, 43, "Output",
   CellTags->"Code"],
  Cell[81866, 2228, 471, 12, 59, "Input",
   CellTags->"Code"],
  Cell[82340, 2242, 152, 3, 46, "Output",
   CellTags->"Code"],
  Cell[83670, 2271, 446, 12, 59, "Input",
   CellTags->"Code"],
  Cell[84119, 2285, 2948, 49, 382, 954, 14, "CachedBoxData", 
  "BoxData", "Output",
   CellTags->"Code"],
  Cell[87104, 2339, 767, 21, 59, "Input",
   CellTags->"Code"],
  Cell[87874, 2362, 2321, 42, 173, 233, 5, "CachedBoxData", 
  "BoxData", "Output",
   CellTags->"Code"],
  Cell[91351, 2430, 588, 17, 81, "Input",
   CellTags->"Code"],
  Cell[91942, 2449, 157, 4, 46, "Output",
   CellTags->"Code"],
  Cell[93261, 2479, 273, 7, 59, "Input",
   CellTags->"Code"],
  Cell[93537, 2488, 9018, 150, 116, 2237, 36, "CachedBoxData", 
  "BoxData", "Output",
   CellTags->"Code"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Text", 108408, 2793},
 {"Code", 111448, 2899}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 637, 16, 105, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[1197, 38, 601, 15, 81, "Input",
 InitializationCell->True,
 CellTags->"Code"],
Cell[1801, 55, 344, 8, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[2170, 67, 401, 11, 81, "Input",
 CellTags->"Code"],
Cell[2574, 80, 114, 2, 36, "Print",
 CellTags->"Code"]
}, Open  ]],
Cell[2703, 85, 875, 21, 127, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[3581, 108, 268, 7, 58, "Text",
 Evaluatable->True,
 CellTags->"Code"],
Cell[3852, 117, 211, 6, 43, "Output",
 CellTags->"Code"],
Cell[4066, 125, 674, 15, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[4743, 142, 388, 11, 58, "Text",
 Evaluatable->True,
 CellTags->"Code"],
Cell[5134, 155, 290, 9, 43, "Output",
 CellTags->"Code"],
Cell[5427, 166, 275, 8, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[5727, 178, 184, 4, 59, "Input",
 CellTags->"Code"],
Cell[5914, 184, 89, 2, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6040, 191, 186, 4, 59, "Input",
 CellTags->"Code"],
Cell[6229, 197, 89, 2, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[6333, 202, 301, 7, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[6659, 213, 384, 11, 59, "Input",
 CellTags->"Code"],
Cell[7046, 226, 199, 6, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[7260, 235, 754, 19, 105, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[8039, 258, 461, 13, 59, "Input",
 CellTags->"Code"],
Cell[8503, 273, 490, 15, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[9008, 291, 258, 7, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[9291, 302, 496, 14, 59, "Input",
 CellTags->"Code"],
Cell[9790, 318, 490, 15, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[10295, 336, 353, 10, 75, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[10673, 350, 196, 4, 59, "Input",
 CellTags->"Code"],
Cell[10872, 356, 1401, 43, 82, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[12288, 402, 297, 9, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[12610, 415, 221, 5, 59, "Input",
 CellTags->"Code"],
Cell[12834, 422, 686, 21, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[13535, 446, 224, 6, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[13784, 456, 171, 4, 59, "Input",
 CellTags->"Code"],
Cell[13958, 462, 686, 21, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[14659, 486, 284, 8, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[14968, 498, 204, 5, 59, "Input",
 CellTags->"Code"],
Cell[15175, 505, 89, 2, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15301, 512, 202, 5, 59, "Input",
 CellTags->"Code"],
Cell[15506, 519, 2943, 91, 120, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[18464, 613, 351, 10, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[18840, 627, 227, 6, 59, "Input",
 CellTags->"Code"],
Cell[19070, 635, 1117, 32, 63, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20224, 672, 272, 7, 59, "Input",
 CellTags->"Code"],
Cell[20499, 681, 903, 27, 63, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[21417, 711, 575, 14, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[22017, 729, 415, 12, 59, "Input",
 CellTags->"Code"],
Cell[22435, 743, 1012, 31, 127, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23484, 779, 294, 7, 59, "Input",
 CellTags->"Code"],
Cell[23781, 788, 692, 21, 67, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[24488, 812, 332, 9, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[24845, 825, 258, 7, 59, "Input",
 CellTags->"Code"],
Cell[25106, 834, 247, 8, 60, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[25368, 845, 629, 14, 105, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[26000, 861, 326, 9, 59, "Input",
 CellTags->"Code"],
Cell[26329, 872, 305, 7, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[26659, 883, 282, 8, 59, "Input",
 CellTags->"Code"],
Cell[26944, 893, 271, 9, 60, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[27230, 905, 600, 14, 91, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[27855, 923, 344, 10, 59, "Input",
 CellTags->"Code"],
Cell[28202, 935, 1557, 52, 82, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[29774, 990, 474, 12, 75, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[30273, 1006, 528, 15, 59, "Input",
 CellTags->"Code"],
Cell[30804, 1023, 756, 28, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[31575, 1054, 1040, 26, 109, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[32640, 1084, 362, 10, 59, "Input",
 CellTags->"Code"],
Cell[33005, 1096, 115, 2, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33157, 1103, 178, 4, 59, "Input",
 CellTags->"Code"],
Cell[33338, 1109, 89, 2, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33464, 1116, 180, 4, 59, "Input",
 CellTags->"Code"],
Cell[33647, 1122, 146, 4, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33830, 1131, 183, 4, 59, "Input",
 CellTags->"Code"],
Cell[34016, 1137, 146, 4, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[34177, 1144, 1307, 28, 131, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[35509, 1176, 643, 19, 59, "Input",
 CellTags->"Code"],
Cell[36155, 1197, 154, 3, 46, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36346, 1205, 283, 7, 59, "Input",
 CellTags->"Code"],
Cell[36632, 1214, 421, 14, 60, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37090, 1233, 240, 6, 59, "Input",
 CellTags->"Code"],
Cell[37333, 1241, 134, 4, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37504, 1250, 388, 12, 59, "Input",
 CellTags->"Code"],
Cell[37895, 1264, 422, 14, 60, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[38332, 1281, 1043, 22, 163, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[39400, 1307, 698, 19, 59, "Input",
 CellTags->"Code"],
Cell[40101, 1328, 694, 19, 68, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[40810, 1350, 817, 14, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[41630, 1366, 1555, 37, 117, "Input",
 CellTags->"Code"],
Cell[43188, 1405, 975, 22, 127, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[44166, 1429, 864, 23, 79, "Input",
 CellTags->"Code"],
Cell[CellGroupData[{
Cell[45055, 1456, 344, 10, 59, "Input",
 CellTags->"Code"],
Cell[45402, 1468, 12554, 205, 152, 6973, 111, "CachedBoxData", "BoxData", \
"Output",
 CellTags->"Code"]
}, Open  ]],
Cell[57971, 1676, 934, 16, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[58908, 1694, 1110, 28, 79, "Input",
 CellTags->"Code"],
Cell[60021, 1724, 877, 15, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[60923, 1743, 669, 16, 62, "Input",
 CellTags->"Code"],
Cell[61595, 1761, 8329, 135, 384, 2394, 35, "CachedBoxData", "BoxData", \
"Output",
 CellTags->"Code"]
}, Open  ]],
Cell[69939, 1899, 1323, 24, 131, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[71287, 1927, 313, 9, 62, "Input",
 CellTags->"Code"],
Cell[71603, 1938, 1658, 52, 68, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[73276, 1993, 907, 16, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[74208, 2013, 333, 9, 62, "Input",
 CellTags->"Code"],
Cell[74544, 2024, 4094, 123, 134, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[78653, 2150, 1239, 23, 141, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[79917, 2177, 406, 11, 59, "Input",
 CellTags->"Code"],
Cell[80326, 2190, 312, 9, 43, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[80653, 2202, 1188, 22, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[81866, 2228, 471, 12, 59, "Input",
 CellTags->"Code"],
Cell[82340, 2242, 152, 3, 46, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[82507, 2248, 1138, 19, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[83670, 2271, 446, 12, 59, "Input",
 CellTags->"Code"],
Cell[84119, 2285, 2948, 49, 382, 954, 14, "CachedBoxData", "BoxData", "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87104, 2339, 767, 21, 59, "Input",
 CellTags->"Code"],
Cell[87874, 2362, 2321, 42, 173, 233, 5, "CachedBoxData", "BoxData", "Output",
 
 CellTags->"Code"]
}, Open  ]],
Cell[90210, 2407, 1116, 19, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[91351, 2430, 588, 17, 81, "Input",
 CellTags->"Code"],
Cell[91942, 2449, 157, 4, 46, "Output",
 CellTags->"Code"]
}, Open  ]],
Cell[92114, 2456, 1122, 19, 59, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[93261, 2479, 273, 7, 59, "Input",
 CellTags->"Code"],
Cell[93537, 2488, 9018, 150, 116, 2237, 36, "CachedBoxData", "BoxData", \
"Output",
 CellTags->"Code"]
}, Open  ]],
Cell[102570, 2641, 1445, 26, 95, "Input",
 Evaluatable->False,
 CellTags->"Text"],
Cell[CellGroupData[{
Cell[104040, 2671, 280, 7, 33, "Input"],
Cell[104323, 2680, 2434, 75, 77, "Output"]
}, Open  ]],
Cell[106772, 2758, 1243, 20, 77, "Input",
 Evaluatable->False,
 CellTags->"Text"]
}
]
*)

(* End of internal cache information *)
