\documentclass[a4paper,10pt]{article}
\usepackage[unicode,verbose]{hyperref}
\usepackage{amsmath,amssymb,amsthm} \usepackage{pb-diagram}
\usepackage{ucs}
\usepackage{noweb}
%\usepackage[utf8x]{inputenc}
%\usepackage[russian]{babel}
\usepackage{cmap}
\usepackage[pdftex]{graphicx}
\pagestyle{plain}
\theoremstyle{definition} \newtheorem{Def}{Definition}
%\usepackage{verbatim} 
\newenvironment{comment}
{\par\noindent{\bf TODO}\\}
{\\\hfill$\scriptstyle\blacksquare$\par}

\begin{document}
@
\title{Finite dimensional Lie algebras}
\author{Anton Nazarov}
\maketitle
\begin{abstract}
  We present concise introduction to the representation theory of finite-dimensional Lie algebras and illustrate it with the computational algorithms implemented in Scheme. 
\end{abstract}
\section{Introduction}
\label{sec:introduction}
Representation theory of finite-dimensional Lie algebras is central to the study of continuous symmetries in physics. This theory is well-understood and there exist standard courses and textbooks on the subject \cite{carter2005lie}, [humphreys]. Nevertheless some problems of the representation theory require extensive computation and no standard textbook on the computational algorithms is known to the author of this notes. There exists a volume \cite{belinfante1989survey}, but it was written in 1970-es and have not been updated since, so its contents are limited to the early approaches and implementations on the old hardware which is unavailable now. Also some progress was made in the computational algorithms of the representation theory since the publication of \cite{belinfante1989survey}. It is important to mention series of papers by Patera et al. (see \cite{moody1982fast} and references therein) and books \cite{kass1990ala}, \cite{bremner1985tables} which introduce new and optimised algorithms although do not discuss the implementations.
There exist several solid implementation of the core algorithms. We want to mention Maple package Coxeter/Weyl \cite{stembridge1995mps} and standalone programs LiE \cite{vanleeuwen1994lsp} and LambdaTensor \cite{fischbacher2002ilp}. These programs are solid and rather fast but have not seen any updates in last several years. Also they are not always convenient to use since they lack graphical user interface and interoperability with the popular programming languages and mathematical programs such as Mathematica, Python or Fortran.
We want to summarise some basic notions and algorithms of representation theory in order to stimulate the emergence of more modern and universal software or at least give some tools to the scientists who by some reasons can not use the existing software.

Our implementation use programming language Scheme and is presented as the Literate program \cite{knuth1992literate}. The choice of the language is due to high portability of its implementations \footnote{There exist Scheme implementations for UNIX, Windows, Linux, Mac OS, Palm OS, Windows CE/Pocket PC/Windows Mobile, Java platform and even micro-controllers, see [some website] for the details}, wide use of Scheme for the teaching \cite{abelson1996structure} and personal preferences of the author. 

\section{Lie algebras}
\label{sec:lie-algebras}

\begin{Def}
  {\bf Lie algebra $\mathfrak{g}$} is a linear space with the bilinear operation
  \begin{equation}
    \label{eq:1}
    \left[\;,\;\right]:\mathfrak{g}\otimes \mathfrak{g}\to \mathfrak{g}
  \end{equation}
  with the additional property that Jacoby identity holds
  \begin{equation}
    \label{eq:2}
    [x,[y,z]]+\text{(cyclic permutations)}=0
  \end{equation}
\end{Def}
Lie algebras can be finite- or infinite-dimensional. Finite-dimensional Lie algebras are classified.

We will represent Lie algebra in the code as the object of class [[lie-algebra]]. We use very simple class system, which is described in the Appendix \ref{sec:object-system}. 
Lie algebra is a vector space, so we really should create class for the vector space which contains methods for the change of basis. But for now we use only one standard basis for Lie algebras and [[lie-algebra]] is the subclass of the most genral class [[object]].
<<Lie algebra class .scm>>=
(class 'lie-algebra 'object
       <<Lie algebra fields .scm>>
       <<Lie algebra methods .scm>>)
@
We need to add several definitions and describe a structure of Lie algebra in order to discuss fields and methods of [[lie-algebra]] class.
\begin{Def}
  {\bf Ideal} $\mathfrak{e}\subset\mathfrak{g}$: $[\mathfrak{g},\mathfrak{e}]\subset \mathfrak{e}$
\end{Def}

\begin{Def}
  $\mathfrak{g}$ is a {\bf simple Lie algebra} if $\mathfrak{g}$ has no proper ideal (except $\mathfrak{g}$ and $\left\{0\right\}$).
\end{Def}

\begin{Def}
  A Lie algebra $\mathfrak{g}$ is called {\bf soluble} if $\mathfrak{g}^{(n)}=\left\{0\right\}$, where $\mathfrak{g}^{(n)}=[\mathfrak{g}^{(n-1)},\mathfrak{g}^{(n-1)}]$.
\end{Def}
\begin{Def}
  $\mathfrak{g}$ is semisimple if its maximal soluble ideal $R\subset\mathfrak{g}$ is equal to $\left\{0\right\}$.
\end{Def}
Semisimple Lie algebra is a direct sum of simple Lie algebras.

Since Lie algebra is a linear space, it can be specified by a set of generators $J_a\in \mathfrak{g}$ with the commutation relations $[J_a,J_b]=if_{ab}^cJ_c$. $f_{ab}^c$ are called {\bf structure constants}. The number of generators is equal to the dimension of Lie algebra.

Now we need to discuss internal structre of Lie algebras, which can be representated with the code constructs and used for the study of algebra properties.

\begin{Def}
  {\bf Cartan subalgebra $\mathfrak{h}\subset\mathfrak{g}$} - is the maximal commutative subalgebra of $\mathfrak{g}$. The dimension of the Cartan subalgebra $\mathfrak{h}$ is called {\bf rank} of Lie algebra $\mathfrak{g}$.
\end{Def}
<<Lie algebra methods .scm>>=
(list 'rank (lambda (self)
	      <<Compute rank .scm>>))
(list 'dimension (lambda (self)
		   <<Compute lie-algebra dimension .scm>>))
@
The structure of simple and semisimple Lie algebras can be encoded by the set of simple roots . Since Cartan subalgebra has no (non-zero) roots it is determined by its dimension.
<<Lie algebra methods .scm>>=
(list 'cartan-subalgebra (lambda (self)
			   (make-commutative-algebra (send self 'rank))))
@
\begin{comment}
  Well, I know how to represent simple lie algebra. But what about commutative and semisimple algebras and different direct sums or tensor products?
\end{comment}
\begin{Def}
  In the {\bf Cartan-Weyl} basis the genrators are constructed as follows.
  First we choose the genrators $H_i\in \mathfrak{h}$ of the Cartan subalgebra. All these generators commute $[H_i,H_j]=0$ and their representations can be diagonalised simultaneously. The remaining generators $E_{\alpha}$ are chosen to be a linear combinations of $J_a$ such that
  \begin{equation}
    \label{eq:4}
    [H_i,E_{\alpha}]=\alpha_i E_{\alpha}
  \end{equation}
  The vector $\alpha=(\alpha_1,\dots,\alpha_r),\; r=rank(\mathfrak{g})$ is called a {\bf root} and the corresponding operator $E_{\alpha}$ is called {\bf ladder operator}.
\end{Def}
The root $\alpha$ maps $H_i$ to the number $\alpha(H_i)=\alpha_i$ hence $\alpha\in \mathfrak{h}^{*}$ - element of the dual to the Cartan subalgebra. The set of all the roos $\alpha$ is denoted by $\Delta=\{\alpha,\; \alpha \text{ - root}\}$. So it is natural for the [[lie-algebra]] class to have a method which lists all the roots.
<<Lie algebra methods .scm>>=
(list 'roots (lambda (self)
	       <<Construct roots .scm>>)) 
@

<<Construct roots .scm>>=

@

\section{Simple roots}
\label{sec:simple-roots}

\section{Weyl group}
\label{sec:weyl-group}

\section{Representations}
\label{sec:representations}

\begin{Def}
  {\bf Representation} of Lie algebra $\mathfrak{g}$ on a linear space $L$ is a homomorphism $V:\mathfrak{g}\to Aut L$. It has the property
  \begin{equation}
    \label{eq:3}
    V([g,h])v=V(g)(V(h)v)-V(h)(V(g)v), \;\text{for}\; g,h\in \mathfrak{g};\; v\in L
  \end{equation}
\end{Def}
There exists a classification of finite-dimensional representations of Lie algebras.


\section{General outline of the code}
\label{sec:general-outline-code}

The code goes to several files of which [[library.scm]] is a compatibility layer which consists of auxiliary functions and allows portability between different Scheme implementations on different OS-es and hardware platforms. [[library.scm]] is described in the appendix \ref{sec:library}.
All the mathematical code which is connected with Lie theory is collected in the file [[lie-algebra.scm]].
<<lie-algebra.scm>>=
<<Lie algebra class .scm>>

@
\appendix

\section{Library}
\label{sec:library}
Since one of our target implementations of Scheme is LispMe, which is only partially R4RS-compliant, we create compatibility layer of common functions.
Also this library can be used to port the code for Lie algebras to other Scheme implementations.

<<library.scm>>=
<<Semi-standard Scheme procedures .scm>>
<<Sets .scm>>
<<LispMe Objects .scm>>
@

\subsection{Commonly used Scheme procedures}
\label{sec:commonly-used-scheme}

@
Due to the limitations of Palm OS platform functions such as [[map]] or [[fold-left]] in LispMe are in the separate library, which should be loaded by hand. Also function [[map]] accepts only 1-argument function and list, so we add these functions to our library. 
<<Semi-standard Scheme procedures .scm>>=
(define nil ())
(define true #t)
(define false #f)

(define (zero? v)
	(= v 0))

(define (map op list)
	(if (null? list) ()
		(cons (op (car list)) (map op (cdr list)))))

(define (map-n op . lists) 
    (define (map-n0 op  lists)
	(if (or (null? lists) (null? (car lists))) '()
	(cons (apply op (map car lists))
		(map-n0 op  (map cdr lists)))))
    (map-n0 op lists))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (filter predicate sequence)
  (cond ((null? sequence) ())
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))

(define (fold-right op init s) (accumulate op init s))
@
We need couple of functions for sets. We represent set as list.
<<Sets .scm>>=
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)        
         (cons (car set1)
               (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))

(define (union-set set1 set2)
	(if (null? set1) set2
		(union-set (cdr set1) (adjoin-set (car set1) set2))
	)
)

@

\subsection{Object system}
\label{sec:object-system}

It is natural to represent Lie algebras, root systems and representation as objects, so we need a class system. Since standard Scheme class systems such as TinyCLOS, GOOPS, SOS can not be used on LispMe due to the lack of hygienic macros, we use the minimal class system called LispMeObjects.

Here is the original documentation:
\begin{verbatim}
  
; Classes

 ; LispMeObjects
 ; http://c2.com/cgi/wiki?LispMeObjects
 ; written by Don Wells
 ; Create a new class with (class name super '(slot value)... '(method function)).
 ; Always use 'object as the super
 ; class at the very least.
 ; a function used as a method 
 ; will take at least one argument 
 ; self, the object that originally
 ; received the method.
 ; Invoke a function by sending the 
 ; name and arguments to an
 ; object. (e.g. (send anObject 'add 'sum 10))
 ; where add is the method and sum and 10
 ; are arguments)
 ; Get the value of a slot by sending
 ; the slot's name.
 ; (e.g. (send anObject 'sum))
 ; Set the value of a slot by sending
 ; the set method defined on object.
 ; (e.g. (send anObject 'set 'sum 20))
 ; Always evaluate (clearClasses) before
 ; doing anything.

 ; an object is (superName (slotname value)... (methodName closure)...)
 ; a class is (className . object)

\end{verbatim}

New classes are created with 
\begin{verbatim}
(class '<classname> '<superclass> (list '<fieldname> <default-value>) ...)
\end{verbatim}
Instances of classes:
\begin{verbatim}
(define <instance-name> (new '<classname> (list '<fieldname> <value>) ...))
\end{verbatim}

<<LispMe Objects .scm>>=

(define *classes* '())


 (define (clearClasses)
  (set! *classes* 
    `((object #f 
      (set ,setSlot)
      (super
         ,(lambda (self)
            (getClass (car self))))))))


 (define (setSlot self aSlotName aValue)
  (let ((slot (assoc aSlotName (cdr self))))
    (cond
      ((not slot) 
        (set-cdr! self 
          (cons 
            (list aSlotName  aValue) 
            (cdr self))))
      (else
        (set-car! (cdr slot) aValue))))
  aValue)


 (define (getClass aClass)
  (let ((class (assoc aClass *classes*)))
      (cond
        ((not class) #f)
        (else (cdr class)))))


 (define (class aName aSuperName . aDefinition)
  (set! *classes* 
    (cons 
      (cons aName (cons aSuperName aDefinition))
      *classes*))
  aName)


 (define (new aSuperName . args)
  (cons aSuperName args))


 (define (send anObject aMessage . args)
  (sendWithSelf anObject anObject aMessage args))


 (define (sendWithSelf self anObject aMessage args)
  (let 
    ((superName (car anObject))
     (slot (assoc aMessage (cdr anObject))))
    (cond
      (slot (valueOfSlot self slot args))
      ((not superName) #f)
      (else 
        (let ((superClass (getClass superName)))
          (cond
            ((not superClass) #f)
            (else
              (sendWithSelf self superClass aMessage args))))))))


 (define (valueOfSlot self theSlot args)
  (let ((value (cadr theSlot)))
    (cond
      ((procedure? value)
        (apply value (cons self args)))
      (else value))))


@

\bibliography{LiterateLie}{}
\bibliographystyle{utphys}

\end{document}
 
