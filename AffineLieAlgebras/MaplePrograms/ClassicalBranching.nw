% -*- mode: Noweb; noweb-code-mode: maplev-mode -*-
\documentclass[a4paper,10pt]{article}
\usepackage[unicode,verbose]{hyperref}
\usepackage{amsmath,amssymb,amsthm} \usepackage{pb-diagram}
\usepackage{ucs}
\usepackage{noweb}
%\usepackage[utf8x]{inputenc}
%\usepackage[russian]{babel}
%\usepackage{cmap}
%\usepackage[pdftex]{graphicx}
\pagestyle{plain}
\theoremstyle{definition} \newtheorem{Def}{Definition}
\begin{document}
\section{Introduction}
\label{sec:prerequisites}

Consider the regular embedding of the subalgebra $\mathfrak{a}$ into the algebra $\mathfrak{g}$.
We want calculate the branching coefficients for some representation of
$\mathfrak{g}$ with the highest weight $\mu$.

To find the branching coefficients we need to compute the anomalous points of $\mathfrak{g}$, select point lying in the main Weyl chamber of $\mathfrak{a}_{\bot}$ and compute the dimensions of corresponding $\mathfrak{a}_{\bot}$-modules.

Then we should construct ``the fan'' and use the recurrent relation for the computation of anomalous branching coefficients.

@

\section{Code}
\label{sec:code}

We consider the representation of $\mathfrak{g}$ with the highest weight $\mu$
\begin{equation}
  \label{eq:5}
  \mu=\frac{1}{2}(e_1+e_2+e_3+e_4)
\end{equation}

At first we need to read the libraries of functions

<<Some initialisation>>=

read("coxeter.mpl"):
plotsetup(X11);
<<Aux functions>>
@
We also need some auxiliary functions.

<<Aux functions>>=
get_indices:=r->map(x->x[1],[indices(r)]);
iprod := (v1,v2) -> coeff(v1,lambda0)*coeff(v2,delta)
                          +coeff(v1,delta)*coeff(v2,lambda0)+
                          coxeter['iprod'](subs({lambda0=0,delta=0,eps=0},v1),
                                           subs({lamda0=0,delta=0,eps=0},v2));
pairing:=(v1,v2) -> 2*iprod(v1,v2)/iprod(v2,v2);

projection:=proc(weights,base)
    local cm;
    cm:=linalg[inverse](
            array([seq([seq(iprod(r1,s),s=base)],r1=[seq(2*r/iprod(r,r),r=base)])]));
    if type(weights,'list') then
        map(x->convert(zip(`*`,
                           convert(linalg[multiply](cm,array(map(y->pairing(x,y),base))),'list'),
                           base)
                       ,`+`),weights);
    else
        convert(zip(`*`,
                    convert(linalg[multiply](cm,array(map(y->pairing(weights,y),base))),'list'),
                    base),`+`);
    end;
end;

@
Then we compute the anomalous points using the modified procedure ``orbit'' from the ``Coxeter/Weyl'' Maple package.
In order to do it we need to compute simple and positive roots of $\mathfrak{g}$, $\mathfrak{a}_{\bot}$ and the embedded algebra $\mathfrak{a}$.

<<ClassicalBranching.mpl>>=
#!/usr/local/bin/maple
<<Some initialisation>>


branching:=proc(mu,subalgebra_roots,algebra_name)
                local <<Local variables>>;
                wg:=weyl['weights'](algebra_name);
                <<Compute roots>>
                <<Compute anomalous points>>
                <<Select points in the main chamber of Abot>>
                <<Compute the dimensions of modules>>
                <<Construct the fan>>
                <<Get gamma0>>
                <<Recurrent procedure>>
                <<Use recurrent relation>>
                <<Return result>>
end;
@
So at first we need to compute the roots of the algebra
$\mathfrak{g}$, see which roots are in $\Delta_{\bot}$
and construct $\mathfrak{a}_{\bot}$.

<<Compute roots>>=

rho:=`weyl/rho`(algebra_name);
algebra_simple_roots:=coxeter['base'](algebra_name);
algebra_pos_roots:=coxeter['pos_roots'](algebra_name);
###subalgebra_pos_roots:=select(x->projection(x,subalgebra_roots)=x,algebra_pos_roots);
subalgebra_pos_roots:=map(x->-x,
                          coxeter['orbit'](map(x->-x,subalgebra_roots),
                                           subalgebra_roots));

Abot_roots:=select(x->projection(x,subalgebra_roots)=0,algebra_pos_roots);
Abot_rho:=1/2*convert(Abot_roots,`+`);

<<Local variables>>=
wg, rho, algebra_simple_roots, algebra_pos_roots,
subalgebra_pos_roots, Abot_roots, Abot_rho,
@

Then we need to construct the set of anomalous points of the representation $L^{(\mu)}$.
\begin{equation}
  \label{eq:6}
  \left\{\omega(\mu+\rho)-\rho,\; \omega\in W\right\}
\end{equation}

<<Compute anomalous points>>=
finite_orbit:=proc(v0,R)
 local S,coS,EPS,is_mem,orb,old,new,u,i,v,parity,u1,j,nparity,pres;
    S:=coxeter['base'](R); coS:=coxeter['co_base'](S);
    if type(v0,'set') or type(v0,'list') then orb:=op(v0)
    else orb:=coxeter['vec2fc'](v0,S)
    fi;
    if type([op(S),orb],'list'('polynom'('rational'))) then
        EPS:=0; is_mem:=(x,y,z)->member(x,y)
    else
        EPS:=`coxeter/default`['epsilon'];
        is_mem:=`coxeter/orbit/f`
    fi;
    new:=[orb];
    nparity:=[seq(-1,i=1..nops(new))];
    pres:=nparity;
    while nops(new)>0 do
        old:=new; new:=[];
        parity:=nparity;
        nparity:=[];
        for j to nops(old) do
            u:=old[j];
            for i to nops(S) do
                v:=iprod(coS[i],u);#coxeter['iprod'](coS[i],u);
                if v>EPS then
                    v:=u-v*S[i];
                    if not is_mem(v,new,EPS) then
                        new:=[op(new),v];
                        nparity:=[op(nparity),parity[j]*(-1)];
                    fi
                fi
            od
        od;
        orb:=orb,op(new);
        pres:=[op(pres),op(nparity)];
    od;
    return zip((x,y)->x+y*eps,[orb],pres);
end:

anom_points:=map(x->x-rho,finite_orbit(mu+rho,algebra_name));

<<Local variables>>=
anom_points, finite_orbit,
@

The points are kept in the symbolic form $k_1\cdot e_1+\dots+k_4\cdot e_4+\epsilon(\omega)\cdot \varepsilon$

We need to select those points which are projected into the main chamber of the embedded algebra $\mathfrak{a}_{\bot}$.
It means that scalar product of these points with all the roots from $\Delta_{\bot}$ is non-negative.

<<Select points in the main chamber of Abot>>=
selected_points:=select(x->
                        andmap(y->iprod(x+rho-projection(x+rho,subalgebra_roots),y)>=0,
                               Abot_roots),
                        anom_points):
#print(nops(selected_points));
<<Local variables>>=
selected_points,
@
To compute dimensions of the corresponding $\mathfrak{a}_{\bot}$-modules we need to add to each selected point $\rho$, project it onto the root space $\Delta_{\bot}$ and substract $\rho_{\mathfrak{a}_{\bot}}$, then use Weyl dimension formula written as the procedure.


<<Procedure to compute dimension of module>>=
dimension:=proc(v,pos_roots) local f,r0;
    r0:=convert(pos_roots,`+`)/2;
    f:=[seq(1+coxeter['iprod'](r,v)/coxeter['iprod'](r,r0),r=pos_roots)];
    convert(f,`*`)
end;
<<Local variables>>=
dimension, ppts,

<<Compute the dimensions of modules>>=
<<Procedure to compute dimension of module>>
ppts:=map(x->
             projection(subs(eps=0,x),subalgebra_roots)+
                        eps*coeff(x,eps)*
                        dimension(x+rho-projection(x+rho,subalgebra_roots)
                        -Abot_rho,Abot_roots),
            selected_points);
#plots[textplot](map(x->[coeff(x,e4),coeff(x,e3),coeff(x,eps)],ppts));
@

We have computed the set of points which constitute the first term in the recurrent formula.
Now we can use the recurrent relation to find the anomalous branching coefficients.

At first we need to construct the set $\Gamma$ and compute $s(\gamma),\; \gamma\in \Gamma$.

In order to do it we need to expand
\begin{equation}
  \label{eq:7}
  \prod_{\alpha\in\pi_{\mathfrak{a}}\left(\Delta^{+}\setminus\Delta_{\bot}\right)} \left(1-e^{-\alpha}\right)^{mult(\alpha)-mult_{\mathfrak{a}}(\alpha)}=
  \sum_{\gamma\in\Phi}s(\gamma)e^{-\gamma}
\end{equation}
<<Construct the fan>>=
<<Count multiplicities of projected roots>>
<<Expand roots with multiplicities>>
@
We will use Maple [[table]] data type

<<Count multiplicities of projected roots>>=
mult_table:=table();
for r in projection([op({op(algebra_pos_roots)}
                    minus {op(Abot_roots)})],subalgebra_roots)
do
    if assigned(mult_table[r]) then
        mult_table[r]:=mult_table[r]+1;
    else
	mult_table[r]:=1;
    end;
end;
@
Then we need to expand the expression \eqref{eq:7}.
We use procedures [[fan]] and [[inj_roots]].
<<Expand roots with multiplicities>>=
mult_inj:=proc(r,roots)
         if assigned(roots[subs(eps=0,r)]) then
             return roots[subs(eps=0,r)];
         else
             return 0;
         fi;
     end proc:

fan_table:=proc(pos_roots,inj_roots)
local t,n,t2,res,p,j;
    n:=coeff(pos_roots[1],eps)-mult_inj(pos_roots[1],inj_roots);
    res:=table();
    p:=subs(eps=0,pos_roots[1]);
    if nops(pos_roots)=1 then
        for j from 1 to n do
                res[j*p]:=(-1)^(j) * binomial(n,j);
        od;
        return res;
    else
        t:=fan_table(pos_roots[2..-1],inj_roots);
        t2:=fan_table([pos_roots[1]],inj_roots);
        for x in get_indices(t) do
            for j from 1 to n do
                if not(assigned(res[p*j+x])) then res[p*j+x]:=0; fi;
                res[p*j+x]:=res[p*j+x]+t[x]*(-1)^(j) * binomial(n,j);
            od;
            if not(assigned(res[x])) then res[x]:=0; fi;
            res[x]:=res[x]+t[x];
        od;
        for x in get_indices(t2) do
            if not(assigned(res[x])) then res[x]:=0; fi;
            res[x]:=res[x]+t2[x];
        od;
        return res;
    fi;
end proc:

fan:=proc(pos_roots,inj_roots)
    local t;
    t:=fan_table(pos_roots,inj_roots);
    if assigned(t[0]) then t[0]:=t[0]+1;
    else
        t[0]:=1;
    end;
    select(x->coeff(x,eps)<>0,map(x->x+t[x]*eps,get_indices(t)));
end proc:

inj_roots:=proc(roots)
        local t;
        t:=table();
        for x in roots do
            t[subs(eps=0,x)]:=1;
        od;
        return t;
    end proc:

pppr:=map(x->x+eps*mult_table[x],get_indices(mult_table));
f:=fan(pppr,inj_roots(subalgebra_pos_roots));
<<Local variables>>=
f, pppr, fan, mult_inj,v, mu0, sing_table
@
Now we have the set $\Gamma$ and $s(\gamma)$.
We can also easilly see, that $\gamma_0=-2\cdot e_3-2\cdot e_4$.
<<Get gamma0>>=
subalgebra_rho:=convert(subalgebra_pos_roots,`+`)/2;
gamma0:=f[1];
for r in f do
  if iprod(r,subalgebra_rho)<iprod(gamma0,subalgebra_rho) then
     gamma0:=r;
  end;
end;
Gamma:=select(y->subs(eps=0,y)<>0,map(x->x-subs(eps=0,gamma0),f));
#plots[textplot](map(x->[coeff(x,e4),coeff(x,e3),coeff(x,eps)],Gamma));
@
Now we can use recurrent formula which we encode as the recurrent procedure
<<Recurrent procedure>>=

calculate_branching_coefficient:=proc(xi,fan,gamma0,ap,res,is_in_borders)
       local xi0,a;
           if not is_in_borders(xi) then return 0; fi;
           xi0:=subs(eps=0,xi);
           if assigned(res[xi0]) then
               return res[xi0];
           fi;

           res[xi0]:=convert(
                         map(gam->coeff(gam,eps)*
                                  calculate_branching_coefficient(xi+subs(eps=0,gam),
                                                                  fan,gamma0,ap,res,
                                                                  is_in_borders),fan)
                     ,`+`);
           if assigned(ap[xi0-subs(eps=0,gamma0)]) then
               res[xi0]:=res[xi0]+ap[xi0-subs(eps=0,gamma0)];
           end;
           res[xi0]:=-1/coeff(gamma0,eps)*res[xi0];
           return res[xi0];
       end proc:

@
The call to this function

We need to set the limits of computation. We can use external border
of the projection of the representation with highest weight $\mu$, but
it is simplier to consider the cube which containts all the
projections of the anomalous points.

<<Use recurrent relation>>=

is_in_borders:=proc(p,borders)
          local ind,c1,c2;
          for ind in indets(borders) do
              c1:=coeff(p,ind);
              c2:=coeff(borders,ind);
              if c1<c2[1] or c1>c2[2] then
                  return false;
              fi;
          od;
          return true;
      end proc;

external_border:=proc(points)
             local p,p1,res,ind,c1,c2;
             res:=0;
             for p1 in points do
                 p:=subs({delta=0,eps=0,lambda0=0},p1);
                 for ind in indets(p) do
                     c1:=coeff(p,ind);
                     c2:=coeff(res,ind);
                     if c2=0 then
                         res:=res+[c1,c1]*ind;
                     elif c1<c2[1] then
                         res:=subs(ind=0,res)+[c1,c2[2]]*ind;
                     elif c1>c2[2] then
                         res:=subs(ind=0,res)+[c2[1],c1]*ind;
                     fi;
                 od;
             od;
             return res;
         end proc;

borders:=external_border(ppts);
i_i_b:=rcurry(is_in_borders,borders);

sing_table:=table();
for v in ppts do
    if assigned(sing_table[subs(eps=0,v)]) then
        sing_table[subs(eps=0,v)]:=sing_table[subs(eps=0,v)]+coeff(v,eps);
    else
        sing_table[subs(eps=0,v)]:=coeff(v,eps);
    fi;
end;


mu0:=projection(mu,subalgebra_roots);
t:=table();
calculate_branching_coefficient(-mu0,Gamma,gamma0,sing_table,t,i_i_b);
#plots[textplot](map(x->[coeff(x,e4),coeff(x,e3),t[x]],get_indices(t)));

@
At last we need to return pretty-printed result.
<<Return result>>=
return map(k->[k,t[k]],
           select(x->t[x]<>0,
                  select(y->andmap(z->iprod(y,z)>=0,
                         subalgebra_pos_roots),
                  get_indices(t))));
@
Here it is.

\section{Examples}
\label{sec:example}

The example of usage:

<<ClassicalBranchingExample.mpl>>=
#!/usr/local/bin/maple
read("ClassicalBranching.mpl"):
wg:=weyl['weights'](B4);
mu:=2*wg[-1]+wg[2];
branching(mu,[e3-e4,e4],B4);
wg:=weyl['weights'](B2);
mu:=wg[1];
branching(mu,[e1+e2],B2);

@
\end{document}
