%!PS-Adobe-3.0 EPSF-3.0
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 229 229
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
[0.1 0 0 0.1 0 0] cm
q
0 0 2290 2290 re
W
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
81.5195 765.043 m
-7.9258 731.031 l
5.3008 695.754 l
94.7461 729.77 l
94.7461 729.77 l
17.8984 720.32 l
81.5195 765.043 l
h
W*
4.7242 w
/DeviceRGB {} CS
[0.439 0.439 0.439] SC
1141.64 1141.73 m
7.8203 716.543 l
S
Q
4.7242 w
/DeviceRGB {} CS
[0.439 0.439 0.439] SC
81.5195 765.043 m
17.8984 720.32 l
94.7461 729.77 l
S
q
0 0 2290 2290 re
W
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
2201.13 1519.04 m
2290.58 1553.05 l
2277.35 1588.32 l
2187.9 1554.31 l
2187.9 1554.31 l
2265.38 1563.13 l
2201.13 1519.04 l
h
W*
1141.64 1141.73 m
2275.46 1566.91 l
S
Q
2201.13 1519.04 m
2265.38 1563.13 l
2187.9 1554.31 l
S
/DeviceRGB {} CS
[0 0 0] SC
7.8203 7.9063 1417.27 1417.27 re
S
7.8203 1425.18 m
858.184 2275.55 l
S
1425.09 1425.18 m
2275.46 2275.55 l
S
1425.09 7.9063 m
2275.46 858.27 l
S
[9.4485 28.3455] 28.3455 d
7.8203 716.543 m
1425.09 716.543 l
2275.46 1566.91 l
858.184 1566.91 l
7.8203 716.543 l
h
S
716.457 7.9063 m
716.457 1425.18 l
1566.82 2275.55 l
1566.82 858.27 l
716.457 7.9063 l
h
S
716.457 716.543 m
1566.82 1566.91 l
S
433.004 1141.73 m
1850.28 1141.73 l
S
1566.82 2275.55 m
1850.28 433.086 l
S
433.004 1850.36 m
716.457 7.9063 l
S
[] 0 d
858.184 2275.55 m
2275.46 2275.55 l
2275.46 858.27 l
S
[37.794] 0 d
858.184 2275.55 m
858.184 858.27 l
2275.46 858.27 l
S
858.184 858.27 m
7.8203 7.9063 l
S
q
0 0 2290 2290 re
W
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
729.055 95.4609 m
695.043 6.0156 l
730.316 -7.2109 l
764.328 82.2344 l
764.328 82.2344 l
720.238 17.9844 l
729.055 95.4609 l
h
W*
[] 0 d
/DeviceRGB {} CS
[0.439 0.439 0.439] SC
1141.64 1141.73 m
716.457 7.9063 l
S
Q
[] 0 d
/DeviceRGB {} CS
[0.439 0.439 0.439] SC
729.055 95.4609 m
720.238 17.9844 l
764.328 82.2344 l
S
q
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
507.332 1803.12 m
439.301 1870.52 l
412.848 1844.06 l
480.246 1776.04 l
480.246 1776.04 l
440.562 1842.8 l
507.332 1803.12 l
h
W*
1141.64 1141.73 m
433.004 1850.36 l
S
Q
507.332 1803.12 m
440.562 1842.8 l
480.246 1776.04 l
S
q
0 0 2290 2290 re
W
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
1553.59 2188.62 m
1587.61 2278.07 l
1552.34 2291.29 l
1518.32 2201.85 l
1518.32 2201.85 l
1563.04 2265.46 l
1553.59 2188.62 l
h
W*
1141.64 1141.73 m
1566.82 2275.55 l
S
Q
1553.59 2188.62 m
1563.04 2265.46 l
1518.32 2201.85 l
S
q
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
1775.32 480.961 m
1843.35 413.562 l
1869.8 440.016 l
1802.41 508.047 l
1802.41 508.047 l
1842.72 440.645 l
1775.32 480.961 l
h
W*
1141.64 1141.73 m
1850.28 433.086 l
S
Q
1775.32 480.961 m
1842.72 440.645 l
1802.41 508.047 l
S
q
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
1625.4 1296.05 m
1718 1331.95 l
1697.21 1384.87 l
1604.62 1348.96 l
1604.62 1348.96 l
1685.88 1349.59 l
1625.4 1296.05 l
h
W*
9.4485 w
/DeviceRGB {} CS
[0 0 0] SC
1141.64 1137.32 m
1699.1 1354.63 l
S
Q
9.4485 w
/DeviceRGB {} CS
[0 0 0] SC
1625.4 1296.05 m
1685.88 1349.59 l
1604.62 1348.96 l
S
q
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
644.02 987.398 m
550.793 953.387 l
570.32 899.844 l
663.547 934.488 l
663.547 934.488 l
582.918 934.488 l
644.02 987.398 l
h
W*
1146.05 1141.73 m
569.691 929.449 l
S
Q
644.02 987.398 m
582.918 934.488 l
663.547 934.488 l
S
q
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
1361.48 778.273 m
1414.39 698.273 l
1445.88 719.691 l
1392.97 799.059 l
1392.97 799.059 l
1419.43 725.359 l
1361.48 778.273 l
h
W*
[28.3455] 0 d
1141.64 1141.73 m
1425.09 716.543 l
S
Q
4.7242 w
1361.48 778.273 m
1419.43 725.359 l
1392.97 799.059 l
S
q
0 2290 m
0 0 l
2290 0 l
2290 2290 l
0 2290 l
h
921.176 1505.81 m
868.262 1585.8 l
836.77 1564.39 l
889.68 1485.02 l
889.68 1485.02 l
863.855 1558.09 l
921.176 1505.81 l
h
W*
[28.3455] 0 d
9.4485 w
1141.64 1141.73 m
858.184 1566.91 l
S
Q
921.176 1505.81 m
863.855 1558.09 l
889.68 1485.02 l
S
[9.4485 28.3455] 28.3455 d
433.004 433.086 1417.27 1417.28 re
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
